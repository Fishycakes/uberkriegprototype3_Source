<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_UnitEvent_Repair</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Do Upkeep Stuff

//day change animation

//income added to funds

global.P_Turn.revenue = scr_calc_revenue(global.P_Turn.number)
global.P_Turn.funds += global.P_Turn.revenue;
//reset unit count
global.P_Turn.unit_count = 0;
//calc battle strenth
global.P_Turn.battle_strength = scr_calc_battleStrength(global.P_Turn);

scr_update_upkeep_stats("History",global.P_Turn);

//events stuff
depth = 0;
image_speed = 0;

ds_queue_clear(global.upkeep_q); //just in case
ready_for_next_event = false;
conclude_upkeep = false;
alarm[0] = 1;
processing = 0;

animation_counter = 0;
height_displace = 0;

view_border = 4*24;
view_speed = 8;


//turn units on if standing
with obj_unit
    { 
    if (ownership = global.P_Turn.number) global.P_Turn.unit_count += 1;
    if isStanding state = "idle";
    if isDisrupted state = "exhaust";
    if (isHidden and ownership = global.P_Turn.number) {fuel -= 5; show_debug_message("hidden fuel consum");
    }
    
    if ( obj_map.terrains[ x div 24, y div 24].isProperty )
        {
        if ( obj_map.terrains[ x div 24, y div 24].canRepair_g and obj_map.terrains[ x div 24, y div 24].ownership = global.P_Turn.number and ownership = global.P_Turn.number)
            {
            //repair disrupt
            if (isDisrupted and ownership = global.P_Turn.number) isDisrupted = false; 
           //HP UP
            if( hp=9 and !dummy)
                {
                hp = 10
                global.P_Turn.funds -= cost div 10;
                ds_queue_enqueue(global.upkeep_q, obj_map.units[x div 24, y div 24]);
                }
                
            else if ( hp &lt; 9 and !dummy)
                {
                hp +=2
                 global.P_Turn.funds -= (cost div 10)*2;
                 ds_queue_enqueue(global.upkeep_q, obj_map.units[x div 24, y div 24]);
                }
                
            fuel = max_fuel;
            ammo = max_ammo;
            }
        }
    }
    
//start upkeep event with heead of Q
if (ds_queue_size(global.upkeep_q) &gt; 0)
{

    processing = ds_queue_dequeue(global.upkeep_q);
    x = processing.x;
    y = processing.y;
    depth = UI_DEPTH_CURSOR;
    alarm[0] = 1;
}

else
{
conclude_upkeep = true;
}


//activate HUD
//instance_activate_object(obj_battleCursor);
//instance_activate_object(obj_miniwin);

//change cursor position
with obj_battleCursor{
    x = global.P_Turn.save_cursor_pos_x;
    y = global.P_Turn.save_cursor_pos_y;
    
    }
    
    
//deactivate COP and SCOP

global.P_Turn.CO.COP_on = false ;
global.P_Turn.CO.SCOP_on = false ;

with (obj_unit)
    {
        if (ownership = global.P_Turn.number)
            {
            
                COP = false ;
                SCOP = false ;
                scr_updateStanding_global();
            
            }     
        
    
    }























/*
//change phaze
global.Phaze = "Main"

//destroy self
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Event actions

if ( conclude_upkeep )

{

    //activate HUD
    instance_activate_object(obj_battleCursor);
    instance_activate_object(obj_miniwin);
    
    //change cursor position
    with obj_battleCursor{
        x = global.P_Turn.save_cursor_pos_x;
        y = global.P_Turn.save_cursor_pos_y;
        }
    
    //change phaze
    global.Phaze = "Main"
    
    //destroy self
    instance_destroy();

}



//move view if unit is out-of-frame



//if not in frame

else if  (    
         ( view_xview[0] + view_wport[0] &lt; processing.x + view_border + 24 and global.canScroll_x ) 
     or  ( view_xview[0] &gt; processing.x - view_border and global.canScroll_x )
     or  ( view_yview[0] &gt; processing.y - view_border and global.canScroll_y ) 
     or  ( view_yview[0] + view_hport[0] &lt; processing.y + view_border+24 and global.canScroll_y )
    )
{ 
    if ( view_xview[0] &gt; processing.x - view_border and global.canScroll_x)
    { 
        
        view_xview[0] -= view_speed;
        alarm[0] = 1;
        
    }


    if ( view_xview[0] + view_wport[0] &lt; processing.x + view_border + 24 and global.canScroll_x) 
    {
        view_xview[0] += view_speed;
        alarm[0] = 1;
    
    }
    
    
    if ( view_yview[0] &gt; processing.y - view_border and global.canScroll_y) 
    {
        
        view_yview[0] -= view_speed;
        alarm[0]  = 1;
        
    }
    
    if ( view_yview[0] + view_hport[0] &lt; processing.y + view_border+24 and global.canScroll_y)
    { 
        view_yview[0] += view_speed;
        alarm[0] = 1;
        
    }
    
}

else if (!ready_for_next_event)
{

    //go to and hold graphic at processing unit position
    
    x = processing.x;
    y = processing.y + height_displace;
    
    if (animation_counter &lt; 7)
    {
    
        height_displace -= 2;
        image_index = animation_counter;
    
    }
    
    if (animation_counter = 10 )
    {
    
        height_displace += 2;
        image_index = 5;
        
    }
    
    
    if (animation_counter = 24)
    {
    
        ready_for_next_event = true;
        height_displace = 0
    
    }
    
    

    
    
    

    
    
    //ready_for_next_event = true;
    
    animation_counter +=1;
    alarm[0] = 1 ;
    

    

}

else if ( ready_for_next_event )
{

    //if next event isn't avaliable
    if ( ds_queue_size(global.upkeep_q) = 0 )
    {
    
        conclude_upkeep = true;
        alarm[0] = 1;
        
    }
    
    else
    {
        
        
         ready_for_next_event = false;
         processing = ds_queue_dequeue(global.upkeep_q);
         
         animation_counter = 0;
         
         //x = processing.x;
         //y = processing.y;    
         alarm[0] = 1;
        

    }




}















</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>




///debug
draw_text(12,12, string(ds_queue_size(global.upkeep_q)));

if (ds_queue_size(global.upkeep_q) &gt; 0)
draw_text(24,24, string(ds_queue_head(global.upkeep_q).x) + ", " + string(ds_queue_head(global.upkeep_q).y));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
