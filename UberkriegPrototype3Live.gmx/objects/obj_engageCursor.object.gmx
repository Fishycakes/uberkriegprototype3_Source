<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_redCursor</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initiate

//depth
depth = UI_DEPTH_CURSOR;
//stop animation
image_speed = 0
//set position


//set alarm to Cursor move speed
alarm[1] = 0;
//view control speed - should be divisable by 24
view_speed = 8;
//view boarder to cursor
view_border = 4*24;

//move to first targetable unit
engage_list_index   = 0;
engage_list_size    = ds_list_size(global.targetables);

engage_target = ds_list_find_value( global.targetables,0);
x = engage_target.x ;
y = engage_target.y ;

initial_type = global.engage_type;

//check engage type
global.engage_type = initial_type;
if (global.acting_unit.ammo &lt; 1 or scr_damageCalculator(global.acting_unit,engage_target,obj_map.terrains[x div 24, y div 24].cover,1) &lt; 0){
    global.engage_type = 2;
    } 
     
//initiate display
dmg_percent=scr_damageCalculator(global.acting_unit,engage_target,obj_map.terrains[x div 24, y div 24].cover,global.engage_type);


i =0;
for (i=0 ; i &lt; engage_list_size ; i+=1){
    targeting = ds_list_find_value(global.targetables,i);
    targeting.isEngageTarget = true;
    } 







</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initiate alarm for cursor controls
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///animate
image_index = global.cursorFrameIndex






</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Navigation by arrow keys


//      check for key delay on press
if (    keyboard_check_pressed(vk_up   ) ||
        keyboard_check_pressed(vk_down ) ||
        keyboard_check_pressed(vk_left ) ||
        keyboard_check_pressed(vk_right) )
        {
        global.cursorKey_delay = global.cursorKey_startspeed ;
        }
//      reset key delay on release
if (    keyboard_check_released(vk_up   ) ||
        keyboard_check_released(vk_down ) ||
        keyboard_check_released(vk_left ) ||
        keyboard_check_released(vk_right) )
        {
        alarm[1] = 0;
        global.cursorKey_delay = global.cursorKey_startspeed ;
        }
// arrow key actions and juice        
if (alarm[1] = -1 )
    {
    switch(keyboard_key)
        {
        case(vk_nokey):
            alarm[1] = 0;
            global.cursorkey_delay = global.cursorKey_startspeed ;
            break;
        
        case vk_up :
            if ( global.posY &gt; 0 ) 
                if (engage_list_index = 0){
                    engage_list_index = engage_list_size -1;
                    }
            else engage_list_index -=1;
            
            global.cursorkey_delay = global.cursorKey_startspeed ;
            engage_target = ds_list_find_value( global.targetables,engage_list_index);
            x = engage_target.x ;
            y = engage_target.y ;
            scr_cursorKey_juice(1,global.cursorKey_sfx);
            //check engage type
            global.engage_type = initial_type;
            if (global.acting_unit.ammo &lt; 1 or scr_damageCalculator(global.acting_unit,engage_target,obj_map.terrains[x div 24, y div 24].cover,1) &lt; 0){
                global.engage_type = 2;
                } 
            break;
        
        case vk_down :
            if ( global.posY &gt; 0 ) 
                if (engage_list_index = engage_list_size -1){
                    engage_list_index = 0;
                    }
            else engage_list_index +=1;
            
            global.cursorkey_delay = global.cursorKey_startspeed ;
            engage_target = ds_list_find_value( global.targetables,engage_list_index);
            x = engage_target.x ;
            y = engage_target.y ;
            scr_cursorKey_juice(1,global.cursorKey_sfx);
            //check engage type
            global.engage_type = initial_type;
            if (global.acting_unit.ammo &lt; 1 or scr_damageCalculator(global.acting_unit,engage_target,obj_map.terrains[x div 24, y div 24].cover,1) &lt; 0){
                global.engage_type = 2;
                } 
            break;
        
        case vk_left :
            if ( global.posY &gt; 0 ) 
                if (engage_list_index = 0){
                    engage_list_index = engage_list_size -1;
                    }
            else engage_list_index -=1;
            
            global.cursorkey_delay = global.cursorKey_startspeed ;
            engage_target = ds_list_find_value( global.targetables,engage_list_index);
            x = engage_target.x ;
            y = engage_target.y ;
            scr_cursorKey_juice(1,global.cursorKey_sfx);
            //check engage type
            global.engage_type = initial_type;
            if (global.acting_unit.ammo &lt; 1 or scr_damageCalculator(global.acting_unit,engage_target,obj_map.terrains[x div 24, y div 24].cover,1) &lt; 0){
                global.engage_type = 2;
                } 
            break; 
                    
        case vk_right :
            if ( global.posY &gt; 0 ) 
                if (engage_list_index = engage_list_size -1){
                    engage_list_index = 0;
                    }
            else engage_list_index +=1;
            
            global.cursorkey_delay = global.cursorKey_startspeed ;
            engage_target = ds_list_find_value( global.targetables,engage_list_index);
            x = engage_target.x ;
            y = engage_target.y ;
            scr_cursorKey_juice(1,global.cursorKey_sfx);
            //check engage type
            global.engage_type = initial_type;
            if (global.acting_unit.ammo &lt; 1 or scr_damageCalculator(global.acting_unit,engage_target,obj_map.terrains[x div 24, y div 24].cover,1) &lt; 0){
                global.engage_type = 2;
                } 
            break;
              
        }
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// view control


// check for boarders and move 
if ( view_xview[0] &gt; x - view_border) view_xview[0] -= view_speed;

if ( view_xview[0] + view_wport[0] &lt; x + view_border + 24) view_xview[0] += view_speed;

if ( view_yview[0] &gt; y - view_border) view_yview[0] -= view_speed;

if ( view_yview[0] + view_hport[0] &lt; y + view_border+24) view_yview[0] += view_speed;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Damage Display Calculator


if (global.acting_unit.name = "Land Cruiser" and abs(global.destination.x-x) + abs(global.destination.y-y) = 24){
    dmg_percent= scr_damageCalculator(global.acting_unit,engage_target,obj_map.terrains[x div 24, y div 24].cover,2);
    }
else dmg_percent= scr_damageCalculator(global.acting_unit,engage_target,obj_map.terrains[x div 24, y div 24].cover,global.engage_type); 



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///confirm

if keyboard_check_pressed(global.keyCONFIRM){
    global.target_unit = engage_target;
    instance_create(0,0,obj_execute_unit_orders);
    with (obj_engageCursor) instance_destroy();
    }
    
    
/*

global.target_unit = obj_map.units[ x div 24 , y div 24 ];
     global.target_unit.hp -= (dmg_percent + random(global.acting_unit.hp)) div 10  ;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// cancel to re-activate command menu

if keyboard_check_pressed (global.keyCANCEL){
    with (obj_unit) isEngageTarget = false; 
    instance_create(x,y,obj_syscom_command);
    instance_destroy();
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///update miniwin targets

global.terrain_check = obj_map.terrains[x div 24,y div 24];
global.unit_check = obj_map.units[x div 24, y div 24];
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug 
/*
unit_selection      = engage_target;

if (global.Phaze = "Main" and unit_selection != 0){
    if (unit_selection.isVisible){
        draw_text(12,84, string_upper(unit_selection.name));
        draw_text(12,96,"HP: " + string(unit_selection.hp)+"/10");
        draw_text(12,108,"Fuel: " + string(unit_selection.fuel)+"/"+string(unit_selection.max_fuel));
        draw_text(12,120,"Ammo: " + string(unit_selection.ammo)+"/"+string(unit_selection.max_ammo));
        }
    }  


///Damage %
draw_text(12,132, "Damage: " + string(round(dmg_percent)) + "%");


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
with(obj_miniwin){
    if isLeft{ 
        draw_sprite(spr_damage_indicator_red,0,x+119,y-37);
        scr_draw_num(spr_num_bright,true,round(other.dmg_percent),x+119+7,y-37+12);
        draw_sprite(spr_num_bright,12,x+119+7+33,y-37+12);
        
        }
    else{ 
        draw_sprite(spr_damage_indicator_red,0,x,y-37);
        scr_draw_num(spr_num_bright,true,round(other.dmg_percent),x+7,y-37+12);
        draw_sprite(spr_num_bright,12,x+7+33,y-37+12);
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
