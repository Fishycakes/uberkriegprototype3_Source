<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initiate
global.last_network_event = "Execute object created";
/*
this objects carries out move orders then an action order 
stored in basic battle controllder as 
global.move_order &amp;
global.action_order
*/
show_debug_message("Create: execute orders");

//hide path_nodes
with (obj_path_node) sprite_index = -1; 
//reset checker tiles
scr_rangeCheck_reset();


if(global.net_mode=2){
    //CONSTRUCT NET_UNIT_ORDER (CLIENT) to be sent at hte end of unit action
    // Convert move order form priority queue to basic list so it cam be stored in global.
    //copu globla.move_order
    //clear move order copy for conversion
    ds_priority_clear(global.net_move_order_copy);
    ds_priority_copy(global.net_move_order_copy, global.move_order);
    //get origin and destination
    mopq_tile = ds_priority_find_min(global.net_move_order_copy);
    
    //clear ds lists
    ds_list_clear(global.net_move_order_x);
    ds_list_clear(global.net_move_order_y); //************************************************************
    //build move path 
    while(ds_priority_size(global.net_move_order_copy) &gt; 0){
        mopq_tile = ds_priority_delete_min(global.net_move_order_copy);
        ds_list_add(global.net_move_order_x, mopq_tile.x);
        ds_list_add(global.net_move_order_y, mopq_tile.y);
        }
    //units info
    ds_map_replace(global.net_unit_orders,"act_ux",global.acting_unit.x div 24); //acting unit pos x
    ds_map_replace(global.net_unit_orders,"act_uy",global.acting_unit.y div 24); //acting unit pos y
    if (global.target_unit!=0 and global.action_order!= ("drop_A"or"drop_B")){
        ds_map_replace(global.net_unit_orders,"tar_ux",global.target_unit.x div 24); //target unit pos x
        ds_map_replace(global.net_unit_orders,"tar_uy",global.target_unit.y div 24); //target unit pos y
        }
    else{
        ds_map_replace(global.net_unit_orders,"tar_ux",noone); //target unit pos x
        ds_map_replace(global.net_unit_orders,"tar_uy",noone); //target unit pos y
        //add drop zone x,y
        }
    //action
    ds_map_replace(global.net_unit_orders,"com",global.action_order);
    //drop_destination
    ds_map_replace(global.net_unit_orders,"drop_x",global.destination.x div 24);
    ds_map_replace(global.net_unit_orders,"drop_y",global.destination.y div 24);
    }

//check move size
//set destination
destination = ds_priority_find_max(global.move_order);
//set starting position
move_from = ds_priority_delete_min(global.move_order);
//set next pos
move_to = ds_priority_delete_min(global.move_order);
//set start node
origin = move_from;

//Triggr camera
global.posX = origin.x div 24;
global.posY = origin.y div 24;

//set initial direction
moveward = "north";

//find new direction
    switch (move_from.x - move_to.x){
        case 0 : //do nothing
            break;
        case 24 : //west
            moveward = "west";
            break;
        case -24 : //east
            moveward = "east";
            break;
        }
    switch (move_from.y - move_to.y){
        case 0 : //do nothing
            break;
        case 24 : //west
            moveward = "north";
            break;
        case -24 : //east
            moveward = "south";
            break;
        }
global.acting_unit.state = moveward;
global.acting_unit.depth = ACTIVE_UNIT;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///move and execute

//reached destination
if (global.acting_unit.x = destination.x and global.acting_unit.y = destination.y and ds_priority_size(global.move_order) = 0  ){
    //Trigger Camera
    global.posX = destination.x div 24;
    global.posY = destination.y div 24;
    
    //finish move and execute action order 
    scr_execute_command();
    
    with(obj_unit){
        isEngageTarget  = false;
        isDisruptTarget = false;
        isSupplyTarget  = false;
        }

     with(obj_path_node) instance_destroy();
    //destroy redundent move cursors, if the exsist?
    with (obj_moveCursor){ instance_destroy();}
    //destroy this event and any redundancies
    instance_destroy();
    }
//move unit according to moveward
else{
    s = 4;
    switch (moveward){
        case "north": global.acting_unit.y -= s; break;
        case "east" : global.acting_unit.x += s; break;
        case "south": global.acting_unit.y += s; break;
        case "west" : global.acting_unit.x -= s; break;
        }


//if unit is at move to 
if( global.acting_unit.x = move_to.x and global.acting_unit.y = move_to.y){
    //update vision
    scr_updateLocalVision(global.acting_unit);
    //fuel consumption
    global.acting_unit.fuel -= scr_check_move_cost(global.acting_unit, obj_map.terrains[move_to.x div 24, move_to.y div 24]);
    //set new co-ordinates
    move_from = move_to;
    if (ds_priority_size(global.move_order) &gt; 0){
        move_to = ds_priority_delete_min(global.move_order);
        //Trigger Camera
        global.posX = move_to.x div 24;
        global.posY = move_to.y div 24;
        }

    
    
    
    //DeBug
    show_debug_message("Move to (" + string(move_to.x) + "," + string(move_to.y) + ") : " +string(obj_map.units[ move_to.x div 24, move_to.y div 24]));
    
   
    
    
    //find new direction
    switch (move_from.x - move_to.x){
        case 0 : //do nothing
            break;
        case 24 : //west
            moveward = "west";
            break;
        case -24 : //east
            moveward = "east";
            break;
        }
    switch (move_from.y - move_to.y){
        case 0 : //do nothing
            break;
        case 24 : //west
            moveward = "north";
            break;
        case -24 : //east
            moveward = "south";
            break;
        }
    global.acting_unit.state = moveward;
    
     //check for TRAP! (if an enemy unit occupies move_to)
    if ( obj_map.units[ move_to.x div 24, move_to.y div 24] != 0){
        show_debug_message("pass unit occupes this space");
        
        
        if(obj_map.units[ move_to.x div 24, move_to.y div 24].team != global.P_Turn.team){
            show_debug_message("this is an enemy unit");
            
        
            //deactivate drop targets if action is drop A or B
            if (global.action_order = "drop_A" or global.action_order = "drop_B"){
                instance_deactivate_object(global.target_unit);
                global.target_unit = 0;
                 
                }
            //send ucom
            scr_send_ucom();
            
            //set unit to map arry
            obj_map.units[move_from.x div 24,move_from.y div 24] = global.acting_unit;
            global.acting_unit.state =  "exhaust";
            global.acting_unit.alarm[0] =  1;
            //reset depth
            scr_setUnitDepth(global.acting_unit); 
            //create unit event object and set to trap
            itsatrap = instance_create(move_from.x,move_from.y,obj_event_trap);
            itsatrap.depth = UI_DEPTH_CURSOR
            //reset capturing
            global.acting_unit.capturing = 0;
            
          
            //update Radio Boarder
            scr_globalRadioCheck();
            scr_update_radioBoarder();
            scr_rangeCheck_reset();

            
            //reset unit alarm
            global.acting_unit.alarm[0] = 1;
            with(obj_path_node) instance_destroy();
            //destroy redundent move cursors, if the exsist?
            with (obj_moveCursor) instance_destroy();
            
           

            //destroy this event
            instance_destroy();
            }
        }
    }
}












</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///debug

draw_text(12,120,string(global.acting_unit.depth));


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
