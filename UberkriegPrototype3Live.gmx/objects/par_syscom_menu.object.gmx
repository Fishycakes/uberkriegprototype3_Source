<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_syscom_cursor</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initiate

//create list?

//depth
depth = UI_DEPTH_WIN;
//stop animation
image_speed = 0;
//set alarm to Cursor move speed
alarm[1] = 0;
//curosr icon state
cursor_icon = -1;

//set graphic position


//set position to 1
position = 1;
item_height = 24 ;

// create list

menu_content = ds_list_create();

//instance_deactivate_object(obj_battleCursor);


//left side

if (x &gt; view_xview+view_wview -216) x -= 192;

start_y = y;
start_x = x;

row = 0
row_max = 0;
row_size = 24;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initiate for cursor animation
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///animate
image_index = global.cursorFrameIndex;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///navigation

//key release reset
if (    keyboard_check_pressed(global.keyUP     ) ||
        keyboard_check_pressed(global.keyDOWN   ) ||
        keyboard_check_pressed(global.keyLEFT   ) ||
        keyboard_check_pressed(global.keyDOWN   ) )
        {
        global.cursorKey_delay = global.cursorKey_startspeed ;
        }
        
if (    keyboard_check_released(global.keyUP    ) ||
        keyboard_check_released(global.keyDOWN  ) ||
        keyboard_check_released(global.keyLEFT  ) ||
        keyboard_check_released(global.keyRIGHT ) )
        {
        alarm[1] = 0;
        global.cursorKey_delay = global.cursorKey_startspeed ;
        
        }
        
        
if (alarm[1] = -1 )
    {
    switch(keyboard_key)
        {
        case(vk_nokey):
            alarm[1] = 0;
            global.cursorkey_delay = global.cursorKey_startspeed ;
            break;
        
        case global.keyUP : //up
            if ( row = 0) {
                row = row_max; 
                y = start_y + (row_max*row_size);    
                }
            else {
                row -= 1;
                y = start_y + (row*row_size);
                }
            //juice then break
            scr_cursorKey_juice(1,global.cursorKey_sfx);
            break;
        
        case global.keyDOWN : //down
            if ( row &lt; row_max) {
                row += 1; //row +1
                y = start_y + (row*row_size);    
                }
            else {
                row = 0;
                y = start_y;
                }
            //juice then break
            scr_cursorKey_juice(1,global.cursorKey_sfx);
            break;
        
        case global.keyLEFT : //left
            if ( row = 0) {
                row = row_max; 
                y = start_y + (row_max*row_size);    
                }
            else {
                row -= 1;
                y = start_y + (row*row_size);
                }
            //juice then break
            scr_cursorKey_juice(1,global.cursorKey_sfx);
            break;
                    
        case global.keyRIGHT : //right
            if ( row &lt; row_max) {
                row += 1; //row +1
                y = start_y + (row*row_size);    
                }
            else {
                row = 0;
                y = start_y;
                }
            //juice then break
            scr_cursorKey_juice(1,global.cursorKey_sfx);
            break;
            
        }
            
              
          
    

        }
        
    
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///press "A" : execute

if ( keyboard_check_pressed( global.keyCONFIRM) ){
    scr_syscom_execute(ds_list_find_value(menu_content,row));
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///set mini win targets if load
if global.acting_unit.name = "A.P.C."{
    if ds_list_find_value(menu_content,row) = "drop_A" global.unit_check = global.acting_unit.load_A;
    else if ds_list_find_value(menu_content,row) = "drop_B" global.unit_check = global.acting_unit.load_B;

    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///trouble shoot

//draw_text(0,0, ds_list_find_value(menu_content,row));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// draw cap and base
draw_sprite(spr_syscom_cap , global.P_Turn.number-1,start_x,start_y-24);
draw_sprite(spr_syscom_base, global.P_Turn.number-1,start_x,start_y +(ds_list_size(menu_content))*24);

//initiate variable for loop
i = 0 ;

//start loop to read from menu_content

for ( i=0 ; i&lt;ds_list_size(menu_content) ; i+=1){

    item = ds_list_find_value(menu_content, i);
    //exception for drop 
    if (item = "drop_A"){
        draw_sprite(spr_syscom_drop_up,global.P_Turn.number-1,start_x,start_y+(i*24));
        if (global.acting_unit.load_A != 0) {
                draw_sprite(global.acting_unit.load_A.sprite_index,0,start_x+24,start_y+(i*24));
                if (global.acting_unit.load_A.isCommander)  draw_sprite(spr_unitStats_Radio,0,start_x+24,start_y+(i*24));
                if (global.acting_unit.load_A.hp &lt; 10)     draw_sprite(spr_unitStats_HP,global.acting_unit.load_A.hp,start_x+24,start_y+(i*24));
                } 
        }
    else if (item = "drop_B"){
        draw_sprite(spr_syscom_drop_up,global.P_Turn.number-1,start_x,start_y+(i*24));
        draw_sprite(global.acting_unit.load_B.sprite_index,0,start_x+24,start_y+(i*24));
        if (global.acting_unit.load_B .isCommander)  draw_sprite(spr_unitStats_Radio,0,start_x+24,start_y+(i*24));
        if (global.acting_unit.load_B.hp &lt; 10)     draw_sprite(spr_unitStats_HP,global.acting_unit.load_A.hp,start_x+24,start_y+(i*24)); 
        }
    
    else{
        draw_sprite( asset_get_index("spr_syscom_"+item+"_up"),global.P_Turn.number-1,start_x,start_y+(i*24)); 
        }
    }

draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
