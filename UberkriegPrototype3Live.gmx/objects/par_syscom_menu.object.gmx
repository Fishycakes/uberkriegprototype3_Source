<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_syscom_cursor</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initiate

//check type is system or command menu - switch to false for cofx or other menu types
type_syscom = true;

//create list?

//depth
depth = UI_DEPTH_WIN;
//stop animation
image_speed = 0;
//set alarm to Cursor move speed
alarm[1] = 0;
//curosr icon state
cursor_icon = -1;

//set graphic position


//set position to 1
position = 1;
item_height = 24 ;

// create list

menu_content = ds_list_create();

//instance_deactivate_object(obj_battleCursor);


//left side
//if (x &gt; view_xview+view_wview -216) x -= 192;

//variable
var extra_items = 3

///manage height for System menu
if (global.acting_unit  = 0){
    if (global.P_Turn.CO.charge &gt;= global.P_Turn.CO.COP_Bar* star_value and global.P_Turn.CO.COP_Bar !=0 and global.P_Turn.CO.COP_on = false and global.P_Turn.CO.SCOP_on = false ) 
    extra_items += 1;
    
    if (global.P_Turn.CO.charge &gt;= (global.P_Turn.CO.COP_Bar*star_value + global.P_Turn.CO.SCOP_Bar*star_value )and global.P_Turn.CO.SCOP_Bar !=0 and global.P_Turn.CO.COP_on = false and global.P_Turn.CO.SCOP_on = false )  
    extra_items += 1;
    }
//manage Command
else{
    extra_items  =0;// remove from default system menu
    if global.capture      extra_items += 1;
    if global.engage       extra_items += 1;
    if global.join         extra_items += 1;
    if global.attach       extra_items += 1;
    if global.supply       extra_items += 1;
    if global.load         extra_items += 1;
    if global.drop_A       extra_items += 1;
    if global.drop_B       extra_items += 1;
    if global.infiltrate   extra_items += 1;
    if global.hide         extra_items += 1;
    if global.appear       extra_items += 1;
    if global.disrupt      extra_items += 1;
    if global.wait         extra_items += 1;
    }
//check if menu extends below view port and adjust //base of viewport is  highter than base of menu
if (view_yview + view_hview &lt; y+(extra_items*24) ) y = (view_yview + view_hview) - (extra_items)*24-6;    
//check top
if (view_yview &gt; y) y = view_yview+6 

start_y = y;
start_x = x;
adjoob = false; //adjusted for out of bounds
if (x &gt; view_xview+view_wview -216){
    start_x -= 192;
    adjoob = true;
    }

row = 0
row_max = 0;
row_size = 24;

//mpouse control variables
mouse_on = false;
mouse_row = 0;
mouse_item = "wait";
//left side
if (x &gt; view_xview+view_wview -216) x -= 192;

global.last_network_event = "syscom created";



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initiate for cursor animation
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///animate
image_index = global.cursorFrameIndex;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///navigation

//      check for key delay on press
if (global.ip_up_pressed   ||
    global.ip_down_pressed ||
    global.ip_left_pressed ||
    global.ip_right_pressed){
        global.cursorKey_delay = global.cursorKey_startspeed;
        }
        
//      reset key delay on release
if (global.ip_up_released   ||
    global.ip_down_released ||
    global.ip_left_released ||
    global.ip_right_released){
        alarm[1] = 0;
        global.cursorKey_delay = global.cursorKey_startspeed ;
        }
        
        
if (alarm[1] = -1 )
    {
    switch(global.ip_nav){
        case(0):
            alarm[1] = 0;
            global.cursorkey_delay = global.cursorKey_startspeed ;
            break;
        
        case 8 : //up
            if ( row = 0) {
                row = row_max; 
                y = start_y + (row_max*row_size);    
                }
            else {
                row -= 1;
                y = start_y + (row*row_size);
                }
            //juice then break
            scr_cursorKey_juice(1,global.cursorKey_sfx);
            break;
        
        case 2 : //down
            if ( row &lt; row_max) {
                row += 1; //row +1
                y = start_y + (row*row_size);    
                }
            else {
                row = 0;
                y = start_y;
                }
            //juice then break
            scr_cursorKey_juice(1,global.cursorKey_sfx);
            break;
        
        case 4 : //left
            if ( row = 0) {
                row = row_max; 
                y = start_y + (row_max*row_size);    
                }
            else {
                row -= 1;
                y = start_y + (row*row_size);
                }
            //juice then break
            scr_cursorKey_juice(1,global.cursorKey_sfx);
            break;
                    
        case 6 : //right
            if ( row &lt; row_max) {
                row += 1; //row +1
                y = start_y + (row*row_size);    
                }
            else {
                row = 0;
                y = start_y;
                }
            //juice then break
            scr_cursorKey_juice(1,global.cursorKey_sfx);
            break;
            
        }
            
              
          
    

        }
        
    
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///mouse Navigation

if (
    
       mouse_x &gt; start_x + 16 and mouse_x &lt; start_x + 150
   and mouse_y &gt; start_y      and mouse_y &lt; start_y + item_height*(row_max+1)
    
    )
    {
    mouse_on = true;
    mouse_row = (mouse_y - start_y) div item_height;
    mouse_item = ds_list_find_value(menu_content, mouse_row);

    }
else mouse_on = false;

    
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///execute command (press "A" or leftclick)

if global.ip_A_pressed{
    global.last_network_event = "syscom executed";
    //save positions
    global.P_Turn.save_cursor_pos_x = global.posX*24;
    global.P_Turn.save_cursor_pos_y = global.posY*24;
    // execute on selected menu item
    scr_syscom_execute(ds_list_find_value(menu_content,row));
    }
    
if (mouse_check_button_pressed(mb_left)){
    //execute on mouse selection
    if (mouse_on) scr_syscom_execute(ds_list_find_value(menu_content,mouse_row));
    else if (type_syscom) {
        //if drop phaze 2 do nothing
        if !global.drop_phaze_2 { //do nothing if drop phaze 2                
            //clear move datea
            scr_rangeCheck_reset();
            //clear move order array
            ds_priority_clear(global.move_order);
            //destroy path nodes
            with(obj_path_node) instance_destroy(); 
            //place active unit back in array
            obj_map.units[global.acting_unit.x div 24,global.acting_unit.y div 24] = global.acting_unit
            global.acting_unit.state = "idle";
            scr_setUnitDepth(global.acting_unit);
            //reset path Q
            ds_priority_clear(global.move_order);
            //place acting unit back into array
            //reset global vunit command variables to default
            global.acting_unit  = 0;    //empty
            global.target_unit  = 0;    //empty
            global.action_order = "wait"; //default to wait
            //reactivate main phaze YI
            instance_activate_object(obj_battleCursor);
            instance_activate_object(obj_miniwin);
            //destroy move cursor
            with (obj_moveCursorMouse){instance_destroy();}
            //set menueExitDelay
            obj_battleCursor.menuExitDelay = true;
            obj_battleCursor.alarm[3] = 3;
            //instance_activate_object(obj_battleCursor);
            //instance_activate_object(obj_miniwin);
            global.last_network_event = "syscom destroyed";
            instance_destroy();
            } 
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///trouble shoot
//draw_text(0,0,string(x)+" / " +string(start_x));
//draw_text(0,0, ds_list_find_value(menu_content,row));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw menu
// draw cap and base
draw_sprite(spr_syscom_cap , global.P_Turn.number-1,start_x,start_y-24);
draw_sprite(spr_syscom_base, global.P_Turn.number-1,start_x,start_y +(ds_list_size(menu_content))*24);

//initiate variable for loop
i = 0 ;

//start loop to read from menu_content

for ( i=0 ; i&lt;ds_list_size(menu_content) ; i+=1){

    item = ds_list_find_value(menu_content, i);
    //exception for drop 
    if (item = "drop_A" and global.acting_unit.load_A !=0){
        draw_sprite(spr_syscom_drop_up,global.P_Turn.number-1,start_x,start_y+(i*24));
        if (global.acting_unit.load_A != 0) {
                draw_sprite(global.acting_unit.load_A.sprite_index,0,start_x+24,start_y+(i*24));
                if (global.acting_unit.load_A.isCommander)  draw_sprite(spr_unitStats_Radio,0,start_x+24,start_y+(i*24));
                if (global.acting_unit.load_A.hp &lt; 10)     draw_sprite(spr_unitStats_HP,global.acting_unit.load_A.hp,start_x+24,start_y+(i*24));
                } 
        }
    else if (item = "drop_B" and global.acting_unit.load_B != 0){
        draw_sprite(spr_syscom_drop_up,global.P_Turn.number-1,start_x,start_y+(i*24));
        draw_sprite(global.acting_unit.load_B.sprite_index,0,start_x+24,start_y+(i*24));
        if (global.acting_unit.load_B .isCommander)  draw_sprite(spr_unitStats_Radio,0,start_x+24,start_y+(i*24));
        if (global.acting_unit.load_B.hp &lt; 10)     draw_sprite(spr_unitStats_HP,global.acting_unit.load_B.hp,start_x+24,start_y+(i*24)); 
        }
    
    else{
        draw_sprite( asset_get_index("spr_syscom_"+item+"_up"),global.P_Turn.number-1,start_x,start_y+(i*24)); 
        }
    }


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Mouse Select

if mouse_on

    {
    
        //fist handle exceptions drop A and B    
        
        if (mouse_item = "drop_A")
            {
            
                draw_sprite( spr_syscom_drop_down,global.P_Turn.number-1,start_x,start_y+(mouse_row*24));
                //draw unit and stats 
                draw_sprite(global.acting_unit.load_A.sprite_index,0,start_x+24,start_y+(mouse_row*24));
                if (global.acting_unit.load_A.isCommander)  draw_sprite(spr_unitStats_Radio,0,start_x+24,start_y+(mouse_row*24));
                if (global.acting_unit.load_A.hp &lt; 10)     draw_sprite(spr_unitStats_HP,global.acting_unit.load_A.hp,start_x+24,start_y+(mouse_row*24));
            
            }
            
        else if (mouse_item = "drop_B")
            {
            
                draw_sprite( spr_syscom_drop_down,global.P_Turn.number-1,start_x,start_y+(mouse_row*24));
                //draw unit and stats 
                draw_sprite(global.acting_unit.load_B.sprite_index,0,start_x+24,start_y+(mouse_row*24));
                if (global.acting_unit.load_B.isCommander)  draw_sprite(spr_unitStats_Radio,0,start_x+24,start_y+(mouse_row*24));
                if (global.acting_unit.load_B.hp &lt; 10)     draw_sprite(spr_unitStats_HP,global.acting_unit.load_B.hp,start_x+24,start_y+(mouse_row*24));
            
            }
        else 
            {
            
                //draw normal menue items
                draw_sprite( asset_get_index("spr_syscom_"+mouse_item+"_down"),global.P_Turn.number-1,start_x,start_y+(mouse_row*24)); 

            
            }
    
    }






</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw self
draw_self();

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Mouse Pointer

draw_sprite(spr_mousePointer,global.P_Turn.number - 1, mouse_x, mouse_y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
