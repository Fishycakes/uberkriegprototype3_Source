<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_miniwin_standard</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initiate

//set depth
depth = UI_DEPTH_WIN;
//stop animation
image_speed = 0;
// position variable
isLeft = true ;

//window type
miniwin_type = "standard";
miniwin_terrain = spr_miniwin_Plains;
miniwin_terrain_ownership = 0;
miniwin_unit = spr_miniwin_LightTank;
miniwin_unit_ownership = 0;

//aux display 
aux_on = false;







</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Location: Left or Right
miniwinLRcheckX = 24*global.posX;
miniwinLRcheckY = 24*global.posY;

    if (view_xview - miniwinLRcheckX &gt; - 300 and view_yview - miniwinLRcheckY &lt; - 240 ){
        x =  view_xview[0] + 588;
        y =  view_yview[0] + 324;
        isLeft = false;
        }
        
    else if (view_xview - miniwinLRcheckX &lt; - 384 and view_yview - miniwinLRcheckY &lt; - 240 ){
        x =  view_xview[0] + 12;
        y =  view_yview[0] + 324;
         isLeft = true;
        }
    
    else if isLeft{
        x =  view_xview[0] + 12;
        y =  view_yview[0] + 324;
        }
    
    else{
        x =  view_xview[0] + 588;
        y =  view_yview[0] + 324;
        }

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Retrieve Intel from battle curosr

//retrive terrain object index
miniwin_terrain = asset_get_index("spr_miniwin_" + string_letters(global.terrain_check.name));

// retrive terrain ownership if property
if  (object_is_ancestor(global.terrain_check.object_index,obj_property) and (global.terrain_check.isVisible or global.terrain_check.name = "HQ")  ){ 
    miniwin_terrain_ownership = global.terrain_check.ownership;
    }
else miniwin_terrain_ownership = 0;

// retrieve unit info

if (global.unit_check != 0){
    if (global.unit_check.isVisible){
        //get unit sprite index
        miniwin_unit = asset_get_index("spr_miniwin_" + string_letters(global.unit_check.name));
        //get unit ownership, and interpet image index
        miniwin_unit_ownership = global.unit_check.ownership - 1;
        }
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Window Type change: standard, halfsize, load L or R


if ( global.unit_check = 0){
    sprite_index = asset_get_index("spr_miniwin_halfsize");
    }
    
if ( global.unit_check != 0){
     if (global.unit_check.isVisible)
        sprite_index = asset_get_index("spr_miniwin_standard");
    }
    

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///aux display control

if keyboard_check_pressed(global.keyAUX){
    aux_on = true;
    depth = UI_DEPTH_CURSOR -1;
    }
if keyboard_check_released(global.keyAUX){
    aux_on = false;
    depth = UI_DEPTH_WIN;
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Image Index Controller
image_index = global.P_Turn.number - 1 ;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw stuff
draw_self();
//draw Terrain intel
draw_sprite(miniwin_terrain,miniwin_terrain_ownership,x,y);



//draw Unit intel
if (global.unit_check != 0){
    if (global.unit_check.isVisible){
    
        // switch to APC load win
        if (global.unit_check.name = "A.P.C."){
            //LR position switch
            if (isLeft) draw_sprite(spr_miniwin_load_L,global.P_Turn.number-1,x,y);
            else draw_sprite(spr_miniwin_load_R,global.P_Turn.number-1,x,y);
            if (global.unit_check !=0){
                //draw load A
                if (global.unit_check.load_A != 0){
                    APC_load_A = global.unit_check.load_A;
                    if isLeft{
                        draw_sprite(APC_load_A.sprite_index,0,x+172, y+12);
                        if  APC_load_A.hp &lt; 0 draw_sprite(spr_unitStats_HP, APC_load_A.hp, x+172, y+12);
                        if  APC_load_A.isCommander draw_sprite(spr_unitStats_Radio, 0, x+172, y+12);
                        if  APC_load_A.max_ammo &gt; 0 and APC_load_A.ammo/APC_load_A.max_ammo &lt; 0.5 and global.blinking draw_sprite(spr_unitStats_ammofuel,2, x+172, y+12);
                        if  APC_load_A.max_fuel &gt; 0 and APC_load_A.fuel/APC_load_A.max_fuel &lt; 0.5 and !global.blinking draw_sprite(spr_unitStats_ammofuel,1, x+172, y+12);                 
                        }
                    else {
                        draw_sprite(APC_load_A.sprite_index,0,x-28, y+12);
                        if  APC_load_A.hp &lt; 0 draw_sprite(spr_unitStats_HP, APC_load_A.hp, x-28, y+12);
                        if  APC_load_A.isCommander draw_sprite(spr_unitStats_Radio, 0, x-28, y+12);
                        if  APC_load_A.max_ammo &gt; 0 and APC_load_A.ammo/APC_load_A.max_ammo &lt; 0.5 and global.blinking draw_sprite(spr_unitStats_ammofuel,2, x-28, y+12);
                        if  APC_load_A.max_fuel &gt; 0 and APC_load_A.fuel/APC_load_A.max_fuel &lt; 0.5 and !global.blinking draw_sprite(spr_unitStats_ammofuel,1,x-28, y+12);
                        }
                    }
            if (global.unit_check.load_B != 0){
                APC_load_B = global.unit_check.load_B;
                    if isLeft {
                        draw_sprite(APC_load_B.sprite_index,0,x+172, y+62);
                        if  APC_load_B.hp &lt; 0 draw_sprite(spr_unitStats_HP, APC_load_B.hp, x+172, y+62);
                        if  APC_load_B.isCommander draw_sprite(spr_unitStats_Radio, 0, x+172, y+62);
                        if  APC_load_B.max_ammo &gt; 0 and APC_load_B.ammo/APC_load_B.max_ammo &lt; 0.5 and global.blinking draw_sprite(spr_unitStats_ammofuel,2, x+172, y+62);
                        if  APC_load_B.max_fuel &gt; 0 and APC_load_B.fuel/APC_load_B.max_fuel &lt; 0.5 and !global.blinking draw_sprite(spr_unitStats_ammofuel,1, x+172, y+62);  
                       
                        }
                    else {
                        draw_sprite(APC_load_B.sprite_index,0,x-28, y+62); 
                        if  APC_load_B.hp &lt; 0 draw_sprite(spr_unitStats_HP, APC_load_B.hp, x-28, y+62);
                        if  APC_load_B.isCommander draw_sprite(spr_unitStats_Radio, 0, x-28, y+62);
                        if  APC_load_B.max_ammo &gt; 0 and APC_load_B.ammo/APC_load_B.max_ammo &lt; 0.5 and global.blinking draw_sprite(spr_unitStats_ammofuel,2, x-28, y+62);
                        if  APC_load_B.max_fuel &gt; 0 and APC_load_B.fuel/APC_load_B.max_fuel &lt; 0.5 and !global.blinking draw_sprite(spr_unitStats_ammofuel,1, x-28, y+62); 
                        }
                    }
                     
                     
                    
                    
                }
        }
        //draw unit base
        draw_sprite(miniwin_unit,miniwin_unit_ownership,x,y);
    //draw HP, Fuel, Ammo

    scr_draw_num(spr_num_light,false,global.unit_check.hp,x+78,y+26);
    scr_draw_num(spr_num_light,false,global.unit_check.fuel,x+123,y+26);
    if global.unit_check.ammo != -1 scr_draw_num(spr_num_light,true,global.unit_check.ammo,x+142,y+26);
    else draw_sprite(spr_num_light,10,x+142,y+26);
    
    //draw Terrain intel
    draw_sprite(miniwin_terrain,miniwin_terrain_ownership,x,y);
    // draw capture progress
    if( global.unit_check.capturing!= 0){
            scr_draw_num(spr_num_light,false,global.unit_check.capturing,x+139,y+74);
            draw_sprite(spr_miniFlag,global.unit_check.ownership-1,x+144,y+74)
            }
    
    
    
        }
    }
    


    


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///drqaw temp aux

if aux_on{
    if global.unit_check !=0{
    if global.unit_check.isVisible{ 
        draw_sprite(spr_temp_unit_summary,global.unit_check.unit_index, view_xview[0]+150,view_yview[0]+110);
        draw_sprite(spr_temp_summary_boarder,global.P_Turn.number-1,view_xview[0]+150,view_yview[0]+110);
        }
        }
    draw_sprite(spr_temp_terrain_summary,global.terrain_check.index,view_xview[0]+390,view_yview[0]+110);
    draw_sprite(spr_temp_summary_boarder,global.P_Turn.number-1,view_xview[0]+390,view_yview[0]+110);
    
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
