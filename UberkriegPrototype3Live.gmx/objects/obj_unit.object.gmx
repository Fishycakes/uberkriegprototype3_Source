<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize defaults
name = "Unit"
state = "idle" //describe stat of animation
image_speed = 0; //stops image
image_index = 2; //first frame of Idle

//Unit stats
ownership   =  1;
team        =  1;//team used for standing check
hp          = 10;
fuel        = 90;
ammo        =  5;
isDisrupted = false; //true when hit by Covert.Op disrupter
isVisible   = true;
isHidden    = false; // consumes 5 fuel when true, see upkeep

 

//unit static variables
cost        = 6000;
move_type   = "Tracks"; // camps and space please
move_points = 9;
vision      = 2;
radio       = 3;

havePrimaryWeapon   = true;
haveSecondaryWeapon = true;

min_range = 1;
max_range = 1;


//spceial abilities
canCapture      = false;
isCommander     = false;
canAttach       = false; //officers only
canSupply       = false; //APC, uses ammo
canLoadInfantry = 0; //APC, spacific to infantry in case naval and sea units mak it
canHide         = false;
canDisrupt      = false;

//co-ordinates

//unitPosX = x div 24;
//unitPosY = y div 24;

//set alarm 0 for animation
alarm[0] = 1;

//radio checking
isStanding = false;
isException = false; //make exception for move check

//action variables
capturing = 0;

//is target graphic switch
isEngageTarget  = false;
isDisruptTarget = false;
isSupplyTarget  = false;

//Unit Description

descript = "this is a parent object"

//check player that disrupted this unit
disruptor = 0;





</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///animation switch


switch state {
    case "north"    :if( name = "Light Infantry" or "Heavy Infantry" or "Long Gun") scr_animate_object(5,8,5); 
                     else scr_animate_object(5,7,2);
                     break; 
    case "east"    :if( name = "Light Infantry" or "Heavy Infantry" or "Long Gun") scr_animate_object(9,12,5); 
                     else scr_animate_object(9,11,2); 
                     break; 
    case "south"    :if( name = "Light Infantry" or "Heavy Infantry" or "Long Gun") scr_animate_object(13,16,5); 
                     else scr_animate_object(13,15,2);
                     break;  
    case "west"    :if( name = "Light Infantry" or "Heavy Infantry" or "Long Gun") scr_animate_object(17,20,5);
                     else scr_animate_object(17,19,2);
                     break;  

    case "idle"     :   scr_animate_object(2,4,15);     break;
    case "active"   :       
                        if( ownership=1 or ownership=3){
                            if( name = "Light Infantry" or "Heavy Infantry" or "Long Gun") 
                            scr_animate_object(9,12,5);
                            
                            else{
                                scr_animate_object(9,11,5);
                                }
                            }
                            
                        if( ownership=2 or ownership=4){
                            if( name = "Light Infantry" or "Heavy Infantry" or "Long Gun") 
                            scr_animate_object(17,20,5);
                            
                            else{
                                scr_animate_object(17,19,5);
                                }
                            }
                            
                        break;
    case "exhaust"  :   image_index = 21; alarm[0] = 1; break;

    }




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw is target tile

if isEngageTarget   draw_sprite(spr_rangecheck_red,global.rangeCheckerFramIndex,x,y);
if isDisruptTarget  draw_sprite(spr_rangecheck_violet,global.rangeCheckerFramIndex,x,y);
if isSupplyTarget   draw_sprite(spr_rangecheck_clear,global.rangeCheckerFramIndex,x,y);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Brindge Forground

draw_self();

if(instance_exists(obj_terrain_SeaBridge))
{

    if ( obj_map.terrains[x div 24, y div 24].object_index == obj_terrain_SeaBridge.object_index and isVisible)
        {
        draw_sprite(spr_bridgeSea_clear_top,obj_map.terrains[x div 24, y div 24].crossing,x,y);
        }
}



if(instance_exists(obj_terrain_RiverBridge))
    {
    if ( obj_map.terrains[x div 24, y div 24].object_index == obj_terrain_RiverBridge.object_index and isVisible){
        if (state = "exhaust" or state = "idle"){
            draw_sprite(spr_bridgeRiver_clear_top,obj_map.terrains[x div 24, y div 24].crossing,x,y);
            }
        }
    }
if global.mode = "Basic Battle"{    
///Draw is Lost isrupt
if (!isStanding and global.blinking and isVisible) draw_sprite(spr_unitStats_Radio,3,x,y);
//if (hp &lt; 10 and hp  &gt; 0) draw_sprite( spr_unitStats_HP, hp , x,y)
if (isDisrupted and isVisible){ 
    draw_sprite(spr_unitStats_Disrupted,0,x,y);
    }
}
    
if (isCommander and isVisible) draw_sprite(spr_unitStats_Radio,0,x,y);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Visibility

if isVisible    image_alpha = 1;
else            image_alpha = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
