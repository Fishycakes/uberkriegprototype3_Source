<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_basicCursor</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Description

/*

This Cursor is used for the map editor, has the following functions:

- Left click to place selected terrain ( found in obj_map)
- Right click to sample terrain
- Display: selected terrain name, X &amp; Y co-ordinates

eventually this cursor will have to handle units as well, 
but we'll get to it after we have a playable version of this prototype.

*/


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize
 
//Set up graphics
image_speed = 0;    //stop animation
depth = UI_DEPTH_CURSOR;     //Depth to UI-Cursor level

player_set = 0//ownership variable for placing Properties

//The Cursor has an uneven frame rate where each frame. 
//The following variables control the frame delay of each individual image in the sprite

cursorState = 1;    //initiate image-index state variable for frame rate control 
alarm[0] = 2 ;      //initiate animation alarm for animation delay (out of 60 fps)

//create mouse press and release Variable

isLeftPressed = false ;

//Create Selection Variable ( unit or terrain to place )



//keeps UI display Scalled to Full Screen
display_set_gui_size(view_wview[0], view_hview[0]);








</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///animation controller
//this is a switch the check the cursors animation state and sets an alarm for the next frame frame delay (out of 60 fps) 

//Variable set up in create evemt

switch  (cursorState)    
    {
    case 1: image_index = 1;
            alarm[0] = 24;
            cursorState = 2;
            break;
            
    case 2: image_index = 2;
            alarm[0] = 4;
            cursorState = 3;
            break;
    
    case 3: image_index = 3;
            alarm[0] = 8;
            cursorState = 4;
            break;

    case 4: image_index = 2;
            alarm[0] = 2;
            cursorState = 5;
            break;
                
    case 5: image_index = 1;
            alarm[0] = 2;
            cursorState = 6;
            break;
            
    case 6: image_index = 0;
            alarm[0] = 2;
            cursorState = 1;
            break;        
    }





</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///snapping &amp; keyboard Controls

//this code snaps the mouse cursor to a 24x24 grid

x=(mouse_x div 24)*24;
y=(mouse_y div 24)*24;

//The following variables are used to translate the mouse position to co-ordinates in the terrains 2-D array found in the map object

posX = (x) div 24 ;
posY = (y) div 24 ;





</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// place terrain when mouse left button is pressed

if mouse_check_button_pressed(mb_left){
    isLeftPressed = true;
    }
    
if mouse_check_button_released(mb_left){
    isLeftPressed = false;
    }
    
if (isLeftPressed &amp;&amp; scr_inBound(posX,posY))
    {
    if global.selection == obj_terrain_Bridge
        {
        if obj_map.terrains[posX,posY].name == "Sea"
            {
            scr_setTerrain(obj_terrain_SeaBridge, posX, posY)
            }
        if obj_map.terrains[posX,posY].name == "River"
            {
            scr_setTerrain(obj_terrain_RiverBridge, posX, posY)
            }
        else
            {
            //do nothing
            }
        }
    else
        {
        scr_setTerrain(global.selection, posX, posY)
        }
    
    }
    
    
 /*   
    
    if (global.selection == obj_terrain_Bridge &amp;&amp; obj_map.terrains[posX,posY].name == "Sea")
    // set Sea Bridge
        {
        scr_setTerrain(obj_terrain_SeaBridge, posX, posY)
        }
    else if (global.selection == obj_terrain_Bridge &amp;&amp; obj_map.terrains[posX,posY].name == "River" )
    // set river bridge
        {
         scr_setTerrain(obj_terrain_RiverBridge, posX, posY)
        }
    else
        {
        //set terrain for all other senerios
        scr_setTerrain(global.selection, posX, posY); //cursor position
        }
    }

*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Left click to sample terrain

if mouse_check_button_pressed(mb_right){
    if scr_inBound(posX,posY)
        {
        if (obj_map.terrains[posX,posY].name=="Sea Bridge" || obj_map.terrains[posX,posY].name=="River Bridge")
            {
            global.selection = obj_terrain_Bridge;
            global.selection_name = "Bridge"
            }
        else
            {
            global.selection = obj_map.terrains[posX,posY].object_index;
            global.selection_name = global.selection.name;
            }
        }
    } 

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Terrain &amp; ownership Selection by keyboard



switch (keyboard_key)
    {
            
    case ord("0"):
        global.selection = obj_terrain_Sea;
        global.selection_name = "Sea";
        break;
    
    case ord("1"):
        global.selection = obj_terrain_Plains;
        global.selection_name = "Plains";
        break;
    
    case ord("2"):
        global.selection = obj_terrain_Road;
        global.selection_name = "Road";
        break;
    
    case ord("3"):
        global.selection = obj_terrain_Mountain;
        global.selection_name = "Mountain";
        break;
    
    case ord("4"):
        global.selection = obj_terrain_Woods;
        global.selection_name = "Woods";
        break;
            
    case ord("5"):
        global.selection = obj_terrain_Bridge;
        global.selection_name = "Bridge";
        break;
    
        
    case ord("6"):
        global.selection = obj_terrain_River;
        global.selection_name = "River";
        break;
        
    case ord("Q"):
        global.selection = obj_terrain_HQ;
        global.selection_name = "HQ";
        break;
    
    case ord("W"):
        global.selection = obj_terrain_Base;
        global.selection_name = "Base";
        break;
    
    case ord("E"):
        global.selection = obj_terrain_City;
        global.selection_name = "City";
        break;
    
    case ord("R"):
        global.selection = obj_terrain_RadioTower;
        global.selection_name = "Radio Tower";
        break;
      
    case ord("T"):
        global.selection = obj_terrain_CommandPost;
        global.selection_name = "Command Post";
        break;
        
    case ord("A"):
        player_set = 1 ;
        break;
       
    case ord("S"):
        player_set = 2 ;
        break;     
        
        case ord("D"):
        player_set = 3 ;
        break;
        
        case ord("F"):
        player_set = 4 ;
        break;     
        
    case ord("G"):
        player_set= 0 ;
        break;
    }


   

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// this is a temperary readout at the top left corner

c_uiWhite = make_colour_rgb(250,250,250);

draw_set_font(ft_AuroraEx);
draw_set_colour(c_uiWhite);
draw_set_halign(fa_left);

posX_readout = "X=" + string(posX);
posY_readout = "Y=" + string(posY);



draw_text(0,0,global.selection_name);
draw_text(0,12,posX_readout);
draw_text(0,24,posY_readout);



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw "X" if selection is Bridge and terrain is not wet
if(scr_inBound(posX,posY))
    {
    if (global.selection == obj_terrain_Bridge )
        {
        
        if (obj_map.terrains[posX,posY].object_index == obj_terrain_Sea         || 
            obj_map.terrains[posX,posY].object_index == obj_terrain_River       ||
            obj_map.terrains[posX,posY].object_index == obj_terrain_SeaBridge   ||
            obj_map.terrains[posX,posY].object_index == obj_terrain_RiverBridge
            )
            {
            //do nothing
            }
        else
            {
              if (cursorState == 2 || cursorState == 1)
                {
                draw_sprite(spr_basicCursor_Icons,7,x,y);
                }
            }

        }
    }



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Change to ViewGrab

//this code creates a new object that is used to move the view-port 

//create new grabby-hand object
instance_create(x,y,obj_grabHand_mapEditor);

//deactivate self
instance_deactivate_object(self);

//on spacebare release, the grab-hand object will destroy itself and reactivate this cursor object



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
