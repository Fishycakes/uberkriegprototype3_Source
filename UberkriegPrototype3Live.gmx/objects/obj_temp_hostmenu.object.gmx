<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_tempTitle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Network status readout
global.last_network_event = "Host Menu Created" ;
global.Local_Player = 0; // zero is neutral, no player



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///create server

//create server ( type tcp, port, max 1 client) returns REAL(server id)
global.server = network_create_server(network_socket_tcp , global.sPort, 4);


// check port avaliability
while (global.server &lt; 0 and global.server &gt; 65535){
    global.sPort++;
    global.server = network_create_server(network_socket_tcp , global.sPort, 4);
    }    

show_debug_message("Listening on " + string(global.sPort));
global.last_network_event = "Host server created!   " + string(global.server);
//switch server network type
global.net_mode = 1;

    

 
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// create open slots

//get info from map to see how many players can play then create slots --------------------------------------------------

last_player = 0;


//if file_exists("protoland.ubm") map_for_net = "protoland.ubm";

//map file exsist and net mode = 1 (hose server mode)
if (file_exists("protoland.ubm") and global.net_mode = 1){
    global.last_network_event = "Hosting: " + "protoland.ubm mazinger"  ; //make map name eventrually
    ini_open("protoland.ubm") //load map
    
    //get map height and width
    var w = ini_read_real("Meta", "Width"  ,5);
    var h = ini_read_real("Meta", "Height" ,5);
    
    //variable used to rotate sockets
    check_socket = 1;
    
    global.conect_P[1] = false;
    global.conect_P[2] = false;
    global.conect_P[3] = false;
    global.conect_P[4] = false;
    
    //check terrains and units to check for HQs and commanders and their ownership
    var i = 0;
    var j = 0;
    
    for (i=0 ; i&lt;w ; i++) {
        for ( j=0 ; j&lt;h ; j++){
            pos = string(i)+ "X" + string(j) + "Y";
            //Terrains
            if ini_read_real("Terrains" , pos , 0) = 11 { // chech if is HQ ( index: 11 )
                player_num = ini_read_real("Terrains",pos+"P",1)
                global.player_name[player_num] = "P"+string(player_num)+". open" 
                global.sSocket[player_num] = "ready"
                global.conect_P[player_num] = true;
                //check index of last player
                if player_num &gt; last_player last_player = player_num;
                }
            }
        }
        
    
    
    //close file
    ini_close();
    //player readiness count
    global.number_of_players = 0;
    //count
    i = 1;
    for (i = 1 ; i &lt; 5 ; i++) {
        if (global.sSocket[i] = "ready") global.number_of_players++ ;
        }
    
    global.last_network_event = "Hosting: protoland.ubm for " +  string(global.number_of_players)  ; //make map name eventrually
    }
else {
    global.last_network_event = "map not found" ;
    }
    




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///listn for connection request from client
if global.net_mode = 1{ //server side
    //check type connect
    if ds_map_find_value(async_load, "type") = network_type_connect {
        global.last_network_event = "connect request recieved";    
                
        //creat list of nretwork indexes (stored in sSocket array), for purpose of bradcast
        
        var unconnected = true;
        while (unconnected){

            //check socket ket on que, if not ready , go to next
            if global.sSocket[check_socket] = "ready" {
        
                global.last_network_event = "conection request recieved!";
                
                //get socket used and stor as server socket
                global.sSocket[check_socket] = ds_map_find_value(async_load, "socket");
                global.player_name[check_socket] = "P"+string(check_socket)+" Connected";
                ds_list_add(global.client_list, check_socket);
                
                //ping back and assign client with player number
                //create ds_map with instructions and arguments ( rememebr keys need to be strings!!! )
                ds_map_clear(global.map_out);
                ds_map_add(global.map_out, "scr" , "net_assign_player");
                ds_map_add(global.map_out , "p_num" , check_socket);  
                //convert to JSON string
                global.json_out = json_encode(global.json_out);
                //store in buffer
                var b_out = buffer_create( string_byte_length(global.json_out)+1 , buffer_fixed ,  1 );
                buffer_write( b_out , buffer_string , global.json_out );
                //send to conected client
                network_send_packet( global.sSocket[check_socket] , b_out , buffer_get_size(b_out) );
                //destroy all relavent ds and buffers
               // ds_map_destroy(global.map_out);
                buffer_delete(b_out);
                //update readout
                global.last_network_event = "slot assignment for P" + string(check_socket) +  " sent";     
                unconnected = false;
                
                
                }
            //increase index
            check_socket++ ;            
            }

        //check to see if all slots are fille    
        if last_player &lt; check_socket {
            global.last_network_event = "all player slots filled" ;
            //instruct clients to start gmae
            ds_map_clear(global.map_out);
            ds_map_add(global.map_out, "scr" , "net_start_game" );
            //add CO index
            ds_map_add(global.map_out, "P1CO" , global.P1_CO );
            ds_map_add(global.map_out, "P2CO" , global.P2_CO );
            ds_map_add(global.map_out, "P3CO" , global.P3_CO );
            ds_map_add(global.map_out, "P4CO" , global.P4_CO );
            //add "protoland.ubm" map file to map_out
            scr_add_ubm_to_ds_map("protoland.ubm",global.map_out);
            //send as json string
            scr_send( global.map_out , "all" ); 
            }   
        }
    }   
           

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw open player slots

draw_text(140, 210 + 16*3 , string(global.player_name[1]));
draw_text(140, 210 + 16*4 , string(global.player_name[2]));
draw_text(140, 210 + 16*5 , string(global.player_name[3]));
draw_text(140, 210 + 16*6 , string(global.player_name[4]));
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
