<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_tempTitle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Network status readout
global.last_network_event = "Host Menu Created" ;
global.Local_Player = noone;



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///create server

//create server ( type tcp, port, max 1 client) returns REAL(server id)
global.server = network_create_server(network_socket_tcp , global.sPort, 4);

//check if server worked
if global.server &lt; 0{
    global.last_network_event = "Failed to create server!";
    }
else{
    show_debug_message("Listening on " + string(global.sPort));
    global.last_network_event = "Host server created!   " + string(global.server);
    //switch server network type
    global.net_mode = 1;
    }
 
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// create open slots

//get info from map to see how many players can play then create slots --------------------------------------------------

last_player = 0;

//map file exsist and net mode = 1 (hose server mode)
if (file_exists("protoland.ubm") and global.net_mode = 1){
    global.last_network_event = "Hosting: protoland.ubm"  ; //make map name eventrually
    ini_open("protoland.ubm") //load map
    
    //get map height and width
    var w = ini_read_real("Meta", "Width"  ,5);
    var h = ini_read_real("Meta", "Height" ,5);
    
    //variable used to rotate sockets
    check_socket = 1;
    
    //check terrains and units to check for HQs and commanders and their ownership
    var i = 0;
    var j = 0;
    
    for (i=0 ; i&lt;w ; i++) {
        for ( j=0 ; j&lt;h ; j++){
            pos = string(i)+ "X" + string(j) + "Y";
            //Terrains
            if ini_read_real("Terrains" , pos , 0) = 11 { // chech if is HQ ( index: 11 )
                player_num = ini_read_real("Terrains",pos+"P",1)
                global.player_name[player_num] = "P"+string(player_num)+". open" 
                global.sSocket[player_num] = "ready"
                //check index of last player
                if player_num &gt; last_player last_player = player_num;
                }
            }
        }
        
    
    
    //close file
    ini_close();
    }
else {
    global.last_network_event = "map not found" ;
    }




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///listn for connection request from client
if global.net_mode = 1{ //server side
    //check type connect
    if ds_map_find_value(async_load, "type") = network_type_connect{
        
        var unconnected = true;
        
        while (unconnected){

            //check socket ket on que, if not ready , go to next
            if global.sSocket[check_socket] = "ready" {
    
                global.last_network_event = "conection request recieved!";
                
                //get socket used and stor as server socket
                global.sSocket[check_socket] = ds_map_find_value(async_load, "socket");
                global.player_name[check_socket] = "P"+string(check_socket)+" Connected";
                ds_list_add(global.client_list, check_socket);
                
                //ping back and assign client with player number
                
                var file_name = "outgoing.snd";
                
                //delete "outgoing.snd" if exsist
                if file_exists(file_name) file_delete(file_name)
                //create/open file
                var f_playerAssign = ini_open(file_name);
                //write file instructions
                ini_write_string("meta", "type" , "host_room_action");  //in case it is important
                ini_write_string("meta" , "scr" , "net_playerNumAssign"); // will use native function, script_execute, on client side.
                ini_write_real(  "num" , "num" , check_socket ); // argument for net script abouve ^
                //close file
                ini_close();
                
                //load file to buffer
                var b_buffer  = buffer_load(file_name);
                //send buffer to client
                network_send_packet(global.sSocket[check_socket],b_buffer,buffer_get_size(b_buffer));
                //destroy buffer
                buffer_delete(b_buffer);
                
                global.last_network_event = "player assignment sent throgh socket: " + string(check_socket);
                unconnected = false;
                
                }
            
            //increase index
            check_socket++ ;
            
            }
        
        //check to see if all slots are fille    
        if last_player &lt;= check_socket {
        global.last_network_event = "player assignment sent throgh socket: " + string(check_socket);
            //copy a map file and add script to it, save as outgoing.snd
            file_copy("protoland.ubm", "outgoing.snd");
            ini_open("outgoing.snd");
            ini_write_string("meta","type","host_room_action");
            ini_write_string("meta","scr","net_map_transfer");
            ini_close();
            
            b_buffer = buffer_load("outgoing.snd");
            
            //sent to all clients
            var i = 0;
            for ( i = 0 ; i &lt; ds_list_size(global.client_list)  ; i++ ){
                network_send_packet(global.sSocket[ ds_list_find_value(global.client_list,i) ], b_buffer,buffer_get_size(b_buffer));
                }
                buffer_delete(b_buffer);
                
            //start gmae
            room_goto(rm_game_Basic); 
            }    
        }
    }
    

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw open player slots

draw_text(100, 210 + 16*3 , string(global.player_name[1]));
draw_text(100, 210 + 16*4 , string(global.player_name[2]));
draw_text(100, 210 + 16*5 , string(global.player_name[3]));
draw_text(100, 210 + 16*6 , string(global.player_name[4]));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
