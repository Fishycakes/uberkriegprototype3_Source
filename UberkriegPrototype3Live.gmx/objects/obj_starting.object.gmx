<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_black</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initiate

depth = TRANS;


state = "fade in" //  *create -&gt; fade in -&gt; waiting -&gt; fade out -&gt; *destroy
image_alpha = 0; //alpha value

//reset units and propeties
            with(obj_unit){
                state = "idle";
                if ownership = global.P_Turn.number state = "exhaust";
                image_index = 21;
                isStanding = false ;
                isMovAgn = false;
                }
            with (obj_property) isStanding = false;
            //set is standing for all players
            //scr_updateStanding(global.P_Turn);
            scr_updateStanding_global();


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// fading and key check






switch state {
    case "fade in" :
        if (image_alpha &gt; 1) {
            state = "waiting"
            
            //change Day
            if global.P_Turn.number == global.last_player global.Day +=1;
            //UPKEEP PREP
            show_debug_message("NEW TURN");
            //change player
            changeplayer = ds_queue_dequeue(global.player_q);
            ds_queue_enqueue(global.player_q,changeplayer);
            //update P _turn 
            global.P_Turn = ds_queue_head(global.player_q) ;
            //reset viewport
            view_xview[0] = global.P_Turn.save_view_pos_x;
            view_yview[0] = global.P_Turn.save_view_pos_y;
            //chang phase
            global.Phaze = "Waiting";
 
            //reset units and propeties
            with(obj_unit)
                    {
                    state = "idle";
                    if ownership = global.P_Turn.number state = "exhaust";
                    image_index = 21;
                    isStanding = false ;
                    if( ownership  = global.P_Turn.number )
                        {
                        //cop on or off
                        COP  = false;
                        SCOP = false;
                        }
                    }
            with (obj_property) isStanding = false;
            //set is standing for all players
            scr_updateStanding_global();
            
            //deactivate COP and SCOP
            global.P_Turn.CO.COP_on = false ;
            global.P_Turn.CO.SCOP_on = false ;
            //reset visibility af all positions
            scr_globalVisionReset();
            scr_updateGlobalVision();
            //update boarder for new turn
            scr_globalRadioCheck();
            scr_update_radioBoarder();   
          
        //change cursor pose to saved (to player)
        
        //auto save turn ( for continue )
        scr_quick_save("quicksave.ubq");
        //if netowrk mode is server or client************************************************************************** start of network send action
        if global.net_mode !=0{
            //load save to buffer
            var b_next_turn = buffer_load("quicksave.ubq");
            //readout
            global.last_net_event = "file loaded in buffer, size: " + string(buffer_get_size(b_next_turn));
            //send as server
            if global.net_mode =1 {
                network_send_packet(global.sSocket[1],b_next_turn,buffer_get_size(b_next_turn));
                global.last_network_event = "buffer sent, size: " + string(buffer_get_size(b_next_turn));
                buffer_delete(b_next_turn);
                }
            //send as client    
            if global.net_mode =2 {
                network_send_packet(global.cSocket,b_next_turn,buffer_get_size(b_next_turn));
                global.last_network_event = "buffer sent, size: " + string(buffer_get_size(b_next_turn));
                buffer_delete(b_next_turn);
                } 
            }
        //******************************************************************************************************************end of network send action
        
            }
        else{
            image_alpha += 0.1 ;
            }
        break;
    
    case "waiting" :
        image_alpha = 1;
        if (((keyboard_check_pressed(global.keyCONFIRM) or mouse_check_button_pressed(mb_left)) and global.network_mode = 0) or (global.network_mode != 0 and global.network_turn_switch) ){
            //switch network turn
            global.network_turn_switch = false;
            //switch to "fad out"
            state = "fade out"
            //change phasze to "main"
            global.Phaze = "Upkeep";
            //pre-check standing
            //scr_updateStanding_global();
            //scr_updateGlobalVision();
            
            //change BGM************************************************************************************************************************************tempBGM
            if global.BGM_on{
                audio_stop_sound(global.BGM);
                audio_destroy_stream(global.BGM);
                global.BGM = audio_create_stream(global.tempBGM[global.P_Turn.number]);
                audio_sound_gain(global.BGM,0.7,0);
                audio_play_sound(global.BGM,1,true);
                }
            //audio cue for new turn in netowrk mode
            audio_play_sound(sfx_bark,2,false); 
            
             
            }
        break;
    case "fade out" :
    
        if image_alpha &lt; 0 {
        instance_create(0,0,obj_upkeep);
        instance_destroy();
            }
            
        else{
            image_alpha -= 0.1 ;
            }
        break;
    }
    

    


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///trouble shoot
//draw_text(0,0, global.Phaze + string(global.P_Turn.number))


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x = view_xview;
y = view_yview;

draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
