<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_rangecheck_red</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initiate variables

//move variables
move_cost = -1;
pathority = -1; //path priority (-1 = no path)
arrow_index = 0;
isOnRadio = false;
//CO Zone array to be used with COFX OfficerBoost
CO_Zone[1] = false;
CO_Zone[2] = false;
CO_Zone[3] = false;
CO_Zone[4] = false;
//CO Zone array to be used with COFX field De-Buff
CO_Field[1] = false;
CO_Field[2] = false;
CO_Field[3] = false;
CO_Field[4] = false;
//Drawing Variables (connections)
north    = false;
east     = false;
south    = false;
west     = false;

on_path = false;

//stop animation
image_speed = 0;
image_alpha = 0.7;

//initiate variables for draing radio boarder 
//these are indexes from 4 different sprite put togethert to for the boarder graphic
//set with update radio boarder script

rb_edge     = 0;
rb_corner   = 0;
rb_fill_v   = 0;
rb_fill_h   = 0;

posx = x div 24;
posy = y div 24;




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///animate using global counter

image_index = global.rangeCheckerFramIndex;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// trouble shoot show path

if( pathority != -1 ) on_path =true;
else on_path = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw Order




//draw checker highlight
if (sprite_index != -1) draw_self();

//draw radio boarder
draw_sprite(spr_radio_boarder_edge,     rb_edge,    x,y);
draw_sprite(spr_radio_boarder_corner,   rb_corner,  x,y);
draw_sprite(spr_radio_boarder_fill_v,   rb_fill_v,  x,y);
draw_sprite(spr_radio_boarder_fill_h,   rb_fill_h,  x,y);

//check for smoke
if  obj_map.terrains[posx,posy].isSmoke
   draw_sprite(spr_smoke_B, obj_map.terrains[posx,posy].draw_smoke_index,x,y);

//draw unit stats

//find unit's CO

if ( obj_map.units[posx,posy] != 0)
    {
    
    if (obj_map.units[posx,posy].isVisible)
        {
            with(obj_map.units[other.posx,other.posy])
                {
                if ( HP_hidden and team != global.P_Turn.team) draw_sprite( spr_unitStats_HP, 0 , x,y);
                else if (dummy) draw_sprite( spr_unitStats_HP, 10 , x, y );
                else if (hp &lt; 10 and hp  &gt; 0)    draw_sprite( spr_unitStats_HP, hp , x,y);
                                
                if (capturing  &gt; 0)                         draw_sprite( spr_unitStats_Cap,0,x,y);
                if (isCommander)                            draw_sprite( spr_unitStats_Radio,0,x,y);
                //if (isHidden)                               draw_sprite(spr_unitStats_Hide,0,x,y);
                if (!isStanding     and global.blinking)    draw_sprite(spr_unitStats_Radio,3,x,y);
                if (isMovAgn)                               draw_sprite(spr_unitStats_Move2,3,x,y);
                if (isDisrupted     and !global.blinking)   draw_sprite(spr_unitStats_Disrupted,0,x,y);
                if (isInfiltrate    and !global.blinking)    draw_sprite(spr_unitStats_Infiltrate,0,x,y);
                if (isHidden        and global.blinking)    draw_sprite(spr_unitStats_Hide,0,x,y);
                ///DRAW Power if power on
                if COP draw_sprite(spr_unitStats_Power,0,x,y);
                if SCOP draw_sprite(spr_unitStats_Power,1,x,y);
                //if(dummy and global.P_Turn.number = ownership) draw_sprite(spr_unitStats_Power,2,x,y);
                                
                //ammo and fuel
                if ( max_ammo &gt; 0 and  ammo / max_ammo &lt; 0.5 and global.blinking)
                    {
                    if (name = "A.P.C.") draw_sprite(spr_unitStats_ammofuel,2,x,y);
                    else if (ammo = 0) draw_sprite(spr_unitStats_ammofuel,3,x,y);
                    else draw_sprite(spr_unitStats_ammofuel,0,x,y);
                    }
                    
                    if (fuel/max_fuel &lt; 0.5 and !global.blinking) draw_sprite(spr_unitStats_ammofuel,1,x,y);
                    if ( name = "A.P.C." and ownership = global.P_Turn.number) if ( load_A !=0 or load_B !=0 ) draw_sprite(spr_unitStats_Load,0,x,y);      
                }
                    
                if (image_index != -1)
                {
                //var oversprite = obj_map.units[ x div 24 , y div 24 ] ;
                //draw_sprite(oversprite.sprite_index,oversprite.image_index,x,y);  
                }
            }
             //redraw unit if on
    }
        
    /*

if move_cost != -1 draw_text(x,y,string(move_cost));



if (on_path){ 
    //draw_sprite(spr_rangecheck_bluedk,image_index,x,y);
    draw_text(x,y,string(pathority));
    }

//if (pathority != -1) draw_sprite(spr_movePath,arrow_index,x,y);//draw red tile temp



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///debug

//if CO_Field[global.P_Turn.number] draw_text(x,y,"F");
//draw_text(x,y,string(move_cost));
//draw_text(x,y,string(pathority));




</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
