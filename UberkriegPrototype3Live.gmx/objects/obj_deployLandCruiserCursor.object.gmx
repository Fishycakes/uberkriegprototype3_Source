<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_blueCursor</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initiate
//depth
depth = UI_DEPTH_CURSOR;
//stop animation
image_speed = 0
//set position
x = global.posX*24;
y = global.posY*24;
//set alarm to Cursor move speed
alarm[1] = 0;
//view control speed - should be divisable by 24
view_speed = 8;
//view boarder to cursor
view_border = 2*24;
///mouse navigate variables
mpx = mouse_x div 24 ;//mpuse position X
mpy = mouse_y div 24 ;//mouse position Y
mScroll_on = false;
fScroll_on = false;
//range check flags
move_check_on   = false;
attack_check_on = false;
radio_check_on  = false;
//cursor radio asssist variables
c_radioAssist_range = 0;
c_radioAssist_sprite = 0;
//mouse over radio asssist variables
m_radioAssist_range = 0;
m_radioAssist_sprite = 0;
//
mo_unit = 0;
mo_terrain = 0;
//mouse over checks
if (scr_inBound(mpx,mpy)){
    mo_unit = obj_map.units[mpx,mpy];
    mo_terrain = obj_map.terrains[mpx,mpy];
    } 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initiate alarm for cursor controls
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///base animate and view controls
image_index = global.cursorFrameIndex
/// view control
/*
// check for boarders and move 
if ( view_xview[0] &gt; x - view_border and global.canScroll_x) view_xview[0] -= view_speed;
if ( view_xview[0] + view_wport[0] &lt; x + view_border + 24 and global.canScroll_x) view_xview[0] += view_speed;
if ( view_yview[0] &gt; y - view_border and global.canScroll_y) view_yview[0] -= view_speed;
if ( view_yview[0] + view_hport[0] &lt; y + view_border+24 and global.canScroll_y) view_yview[0] += view_speed;





</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///navigation

//      check for key delay on press
if (global.ip_up_pressed   ||
    global.ip_down_pressed ||
    global.ip_left_pressed ||
    global.ip_right_pressed){
        global.cursorKey_delay = global.cursorKey_startspeed;
        }
        
//      reset key delay on release
if (global.ip_up_released   ||
    global.ip_down_released ||
    global.ip_left_released ||
    global.ip_right_released){
        alarm[1] = 0;
        global.cursorKey_delay = global.cursorKey_startspeed ;
        }
    
// arrow key actions and juice        
if (alarm[1] = -1 ){
    switch(global.ip_nav){
        case(0):
                alarm[1] = 0;
                global.cursorkey_delay = global.cursorKey_startspeed ;
            break;
        case 8 :
            //check valid move option
            if (scr_inBound(global.posX,global.posY - 1)){
                global.posY -=1;
                y = 24*global.posY;
                if(fScroll_on){ 
                    if global.canScroll_y view_yview -= 24;
                    }
                else scr_cursorKey_juice(1,global.cursorKey_sfx);
                }
            else scr_cursorKey_juice(1,global.cursorKey_sfx);
            break;
        case 2 :
        //check valid move option
            if (scr_inBound(global.posX,global.posY +1)){
                global.posY +=1;
                y = 24*global.posY;
                if(fScroll_on){
                    if global.canScroll_y view_yview += 24;
                    }  
                else scr_cursorKey_juice(1,global.cursorKey_sfx);
                }
            else scr_cursorKey_juice(1,global.cursorKey_sfx);
            break;
        case 4 :
            //check valid move option
            if (scr_inBound(global.posX-1,global.posY)){
                global.posX -=1;
                x = 24*global.posX;
                if(fScroll_on){
                    if global.canScroll_x view_xview -= 24 ;
                    }
                else scr_cursorKey_juice(1,global.cursorKey_sfx);
                }
            else scr_cursorKey_juice(1,global.cursorKey_sfx);
            break;   
        case 6 :
            //check valid move option
            if (scr_inBound(global.posX+1,global.posY)){
                global.posX +=1;
                x = 24*global.posX;
                if(fScroll_on){
                    if global.canScroll_x view_xview +=24 ;  
                    }
                else scr_cursorKey_juice(1,global.cursorKey_sfx);
                }
            else scr_cursorKey_juice(1,global.cursorKey_sfx);
            break; 
        }
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Base mouse nav - curosr and view controls
mpx = mouse_x div 24 ;//mpuse position X
mpy = mouse_y div 24 ;//mouse position Y
    
if (mouse_check_button_pressed(mb_left)){
    if (scr_inBound(mpx,mpy)){
        //move cursor
        x = mpx*24;
        y = mpy*24;
        global.posX = mpx;
        global.posY = mpy;
        //juice
        scr_cursorKey_juice(1,global.cursorKey_sfx);
        //initiate grabby
        mScroll_on = true;
        xs = window_mouse_get_x();
        ys = window_mouse_get_y(); 
        }
    } 
if (mouse_check_button_released(mb_left)){
    mScroll_on = false;
    }
///update miniwin targets
global.terrain_check = obj_map.terrains[global.posX,global.posY];
global.unit_check = obj_map.units[global.posX,global.posY];
//cursor radio assist
if (global.unit_check != 0){
    c_radioAssist_range = scr_getUnitRadioRange(global.unit_check,global.terrain_check);
    if (global.unit_check.isStanding) c_radioAssist_sprite = spr_radioAssist_bronze;
    else c_radioAssist_sprite = spr_radioAssist_darkBlue;
    }
//mouse over targets
if (scr_inBound(mpx,mpy)){
    mo_unit = obj_map.units[mpx,mpy];
    mo_terrain = obj_map.terrains[mpx,mpy];
    } 
//mouse over radio assist
if (mo_unit != 0){
    m_radioAssist_range = scr_getUnitRadioRange(mo_unit,mo_terrain);
    if (mo_unit.isStanding) m_radioAssist_sprite = spr_radioAssist_bronze;
    else m_radioAssist_sprite = spr_radioAssist_darkBlue;
    }    
///mouse scrolling
var vMod = 1;
if (global.window_size = 2) vMod = 2;
if (window_get_fullscreen()) vMod = (display_get_width() / view_wview[0]) ;
 if (mScroll_on){
    if (global.canScroll_x){
        xe= window_mouse_get_x();
        view_xview[0] += (xs-xe) div vMod;
        xs = xe;
        }
    if (global.canScroll_y){
        ye= window_mouse_get_y();
        view_yview[0] += (ys-ye) div vMod;
        ys = ye;
        }
    }
    
 ///mouse mid
if mouse_check_button_pressed(mb_middle){
    if (scr_inBound(mpx,mpy)){
        scr_rangeCheck_reset();
        //check for property
        if object_is_ancestor(obj_map.terrains[mpx,mpy].object_index, obj_property){
            scr_updateLocalRadio(obj_map.terrains[mpx,mpy]);
            isOnGlobalRadioCheck = true;
            //global.Mouse_control_tool_tip_text="middle click to check property radio"
            }
        
        // else if no units exsist    
        else{
            scr_globalRadioCheck();
            isOnGlobalRadioCheck = true; 
            }
        mScroll_on= true;
         //initiate scrolling Variables
         xs = window_mouse_get_x();
         ys = window_mouse_get_y();  
        }
    }       
if  mouse_check_button_released(mb_middle){
    mScroll_on= false; 
    isOnGlobalRadioCheck = false;
    scr_rangeCheck_reset();
    
    //reset unit radio check if applicable
    //if obj_map.units[global.posX, global.posY] !=0
    //scr_updateLocalRadio(obj_map.units[global.posX,global.posY]);
    }

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///SPACE global radio control overide
///property and global radio test

if global.ip_Y_pressed{
    scr_rangeCheck_reset();
    //check for property
    if object_is_ancestor(obj_map.terrains[global.posX,global.posY].object_index, obj_property){
        scr_updateLocalRadio(obj_map.terrains[global.posX,global.posY]);
        isOnGlobalRadioCheck = true;
        }
    // else if no units exsist    
    else{
        scr_globalRadioCheck();
        isOnGlobalRadioCheck = true; 
        } 
    }
if global.ip_Y_released{
    isOnGlobalRadioCheck = false;
    scr_rangeCheck_reset();
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Key controls

//check for mouse &amp; keayboard event
if global.ip_A_pressed {
    //check if terrain is visable and is empty
    var land_check = obj_map.terrains[global.posX,global.posY];
    var unit_check = obj_map.units[global.posX,global.posY];
        if(object_is_ancestor(land_check.object_index,obj_property)){
            if (land_check.team = global.P_Turn.team){ 
                instance_create(x+25,y,obj_syscom_landcruiser);
                instance_destroy();
                }
            else if (unit_check != 0){
                if (unit_check.isObservable) scr_updateLocalMove(unit_check);
                }
            }
        else if (unit_check != 0){
            if (unit_check.isObservable) scr_updateLocalMove(unit_check);
            }
    } 
if global.ip_A_released{
    scr_rangeCheck_reset();
    }
    
// Key - cancel
if global.ip_B_pressed{
        //attack range check
        var check_unit = obj_map.units[global.posX,global.posY];
        if (check_unit !=0){
            if (check_unit.isObservable) scr_attack_rance_check(check_unit);
            }
        else{
            fScroll_on = true;
            } 
        }
if global.ip_B_released{
    fScroll_on = false;
    scr_rangeCheck_reset();
    }

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///mouse controls

///mouse left - move check
if (mouse_check_button_pressed(mb_left) and scr_inBound(mouse_x div 24, mouse_y div 24)){
    var check_unit = obj_map.units[mouse_x div 24,mouse_y div 24];
    var check_terrain = obj_map.terrains[mouse_x div 24,mouse_y div 24];
    
    if  (check_unit != 0) {
        if (check_unit.isObservable) scr_updateLocalMove(check_unit);
        }
    else if (object_is_ancestor(check_terrain.object_index,obj_property)){
        scr_updateLocalRadio(check_terrain);
        }
    else scr_globalRadioCheck();
    }
if (mouse_check_button_released(mb_left)) scr_rangeCheck_reset();      
      
///mouse right - range check
if (mouse_check_button_pressed(mb_right) and scr_inBound(mouse_x div 24, mouse_y div 24)){   
    //juice
    scr_cursorKey_juice(1,global.cursorKey_sfx);
    //set new position
    global.posX = mouse_x div 24;
    global.posY = mouse_y div 24;
    x = global.posX*24;
    y = global.posY*24;
    //check for units
    var check_unit = obj_map.units[mouse_x div 24,mouse_y div 24];
    var check_terrain = obj_map.terrains[mouse_x div 24,mouse_y div 24];
    
    if (object_is_ancestor(check_terrain.object_index,obj_property)){
        if (check_terrain.team = global.P_Turn.team){
            //DEPLOY COVERT OP!!!
            instance_create(x+24,y,obj_syscom_landcruiser); 
            instance_destroy(obj_deployLandCruiserCursor);
            }
        else if (check_unit != 0){
            //range check
            if (check_unit.isObservable) scr_attack_rance_check(check_unit);
            }
        }
    else if (check_unit != 0){
        //range check
        if (check_unit.isObservable) scr_attack_rance_check(check_unit);
        }
    }
    
else if (mouse_check_button_released(mb_right) and scr_inBound(mouse_x div 24, mouse_y div 24)){
    scr_rangeCheck_reset();
    }

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///invalid execute position
sprite_index = spr_redCursor;
if (object_is_ancestor(obj_map.terrains[global.posX,global.posY].object_index,obj_property)){  
    if (obj_map.terrains[global.posX,global.posY].ownership = global.P_Turn.number) sprite_index = spr_blueCursor;
    }

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// check for boarders and move 
scr_camera_follow(global.posX,global.posY,global.cam_border,global.cam_speed);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///radio assist
if(global.unit_check!= 0){ 
    if (global.unit_check.isObservable) scr_draw_radioAssist(global.posX,global.posY,c_radioAssist_range,c_radioAssist_sprite);
    }  
if (scr_inBound(mpx,mpy) and mo_unit != 0){
    if (mo_unit.isObservable) scr_draw_radioAssist(mpx,mpy,m_radioAssist_range,m_radioAssist_sprite);
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw curosr
if (sprite_index = spr_redCursor) draw_sprite(spr_x,image_index,x,y);
draw_self();
if (fScroll_on) draw_sprite(spr_moveCurosr,image_index,x,y);




</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw mouse
if mScroll_on 
    draw_sprite(spr_mouseGrabber,global.P_Turn.number-1,mouse_x,mouse_y);
else if (sprite_index = spr_blueCursor and mpx = global.posX and mpy = global.posY){
    draw_text(mouse_x +12, mouse_y+12, "Right click to deploy");
    } 
else{
    draw_sprite(spr_mouseSlapper,global.P_Turn.number-1,mouse_x,mouse_y);
    }
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
