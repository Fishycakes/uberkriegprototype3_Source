<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_basicCursor</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initiate

//depth
depth = UI_DEPTH_CURSOR;
//stop animation
image_speed = 0
//set position
global.posX = x div 24 ;
global.posY = y div 24 ;

if global.mapW &lt;=32 global.canScroll_x = false;
if global.mapH &lt;=18 global.canScroll_y = false;


//set alarm to Cursor move speed
alarm[1] = 0;
//view control speed - should be divisable by 24
view_speed = 8;
//view boarder to cursor
view_border = 2*24;

cursor_icon = 0;

isOnGlobalRadioCheck = false;
checking_move_range = false;
checking_attack_range = false;
fast_scroll_on = false;

//mouse control, open menue click delay switch variable, uses alarm 2
menu_ok = false;
//mouse control, pause screen scroll after exeting, usue alarm 3 
menuExitDelay = false;
//mouse control, for switching to move cursor
move_ready = false;             //aswitchmous press and release
move_ready_count = 0;           //counter
mover_ready_threshold = 3;     //mover ready after count

//booleran for can deploy graphic
can_mouse_deploy = false;

//used to id if mouse will scroll
mscroll = 0;
dmscroll = -1;

//unit radio check variables ( for drawing Radio Assist)
draw_radioAssist = false;
MouseOver_unit = 0;
radioAssist_range = 0;
radioAssist_sprite = spr_radioAssist_gold;

//attack range check target
attack_range_check_unit = 0;


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///radio assist variables

c_radioAssist_on = false;
c_radioAssist_range = 0;
c_radioAssist_sprite = -1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//return menuExitDelay = false
menuExitDelay = false;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///return menu_ok to false 
menu_ok = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initiate alarm for cursor controls
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///animate and set global pos
image_index = global.cursorFrameIndex
//set pos
global.posX = x div 24 ;
global.posY = y div 24 ;


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Navigation by arrow keys //unit radio check(passive)


//      check for key delay on press
if (    keyboard_check_pressed(vk_up   ) ||
        keyboard_check_pressed(vk_down ) ||
        keyboard_check_pressed(vk_left ) ||
        keyboard_check_pressed(vk_right) )
        {
        global.cursorKey_delay = global.cursorKey_startspeed ;
        //reset chekertiles
        }
//      reset key delay on release
if (    keyboard_check_released(vk_up   ) ||
        keyboard_check_released(vk_down ) ||
        keyboard_check_released(vk_left ) ||
        keyboard_check_released(vk_right) )
        {
        alarm[1] = 0;
        global.cursorKey_delay = global.cursorKey_startspeed ;
        }
        
        
// arrow key actions and juice        
if (alarm[1] = -1 )
    {
    switch(keyboard_key)
        {
        case(vk_nokey):
            alarm[1] = 0;
            global.cursorkey_delay = global.cursorKey_startspeed ;
            if isOnGlobalRadioCheck = false scr_rangeCheck_reset();
            break;
        
        case vk_up :
            if (fast_scroll_on and global.posY &gt; 0)
                {
                y -= 24 ;
                if global.canScroll_y view_yview -= 24;
                } 
            
            else
                {
                if ( global.posY &gt; 0 ) y = y  - 24 ;
                scr_cursorKey_juice(1,global.cursorKey_sfx);
                if (isOnGlobalRadioCheck = false and checking_attack_range = false and checking_move_range = false)  scr_rangeCheck_reset();
                }
            break;
        
        case vk_down :
            if ( global.posY &lt; global.mapH - 1  and fast_scroll_on )
                {
                y += 24 ;
                if global.canScroll_y view_yview += 24;
                }
            else
                {
                if ( global.posY &lt; global.mapH - 1 ) y = y  + 24 ;
                scr_cursorKey_juice(1,global.cursorKey_sfx);
                if (isOnGlobalRadioCheck = false and checking_attack_range = false and checking_move_range = false) scr_rangeCheck_reset();
                }    
            break;
        
        case vk_left :
            if ( global.posX &gt; 0 and fast_scroll_on )
                {
                x -= 24 ;
                if global.canScroll_x view_xview -= 24 ;
                }
            
            else
                {
                if ( global.posX &gt; 0 ) x = x  - 24 ;
                scr_cursorKey_juice(1,global.cursorKey_sfx);
                if ( isOnGlobalRadioCheck = false and checking_attack_range = false and checking_move_range = false ) scr_rangeCheck_reset();
                }
            break;  
                    
        case vk_right :
            if ( global.posX &lt; global.mapW - 1 and fast_scroll_on )
                {      
                x += 24 ;
                if global.canScroll_x view_xview +=24 ;  
                }
            
            else
                {
                if ( global.posX &lt; global.mapW - 1 ) x = x  + 24 ;
                scr_cursorKey_juice(1,global.cursorKey_sfx);
                if (isOnGlobalRadioCheck = false and checking_attack_range = false and checking_move_range = false) scr_rangeCheck_reset();      
                }
            break;
        }

    }
    

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// view control


// check for boarders and move 

        if ( view_xview[0] &gt; x - view_border and global.canScroll_x) view_xview[0] -= view_speed;
        
        if ( view_xview[0] + view_wport[0] &lt; x + view_border + 24 and global.canScroll_x) view_xview[0] += view_speed;

        if ( view_yview[0] &gt; y - view_border and global.canScroll_y) view_yview[0] -= view_speed;
        
        if ( view_yview[0] + view_hport[0] &lt; y + view_border+24 and global.canScroll_y) view_yview[0] += view_speed;




</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///check if mouse will scroll

//reset mscroll
mscroll = 0;
dmscroll = -1;
// check for boarders and and add to mscroll 

if ( view_xview[0] &gt; mouse_x - view_border and global.canScroll_x) mscroll += 1 ;

if ( view_xview[0] + view_wport[0] &lt; mouse_x + view_border + 0 and global.canScroll_x) mscroll += 4 ;

if ( view_yview[0] &gt; mouse_y - view_border and global.canScroll_y) mscroll += 8 ;

if ( view_yview[0] + view_hport[0] &lt; mouse_y + view_border + 0 and global.canScroll_y) mscroll += 2 ;


switch (mscroll)
    {
    case 8: 
        dmscroll = 0;
        break;
    case 4: 
        dmscroll = 1;
        break;
    case 2: 
        dmscroll = 2;
        break;
    case 1:
        dmscroll = 3;
        break;
    case 12:
        dmscroll = 4;
        break;
    case 6:
        dmscroll = 5;
        break;
    case 3:
        dmscroll = 6;
        break;
    case 9: 
        dmscroll = 7;
        break;    
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mouse Controls


//reset can mouse deploy
can_mouse_deploy = false;

var mpx = mouse_x div 24 ;
var mpy = mouse_y div 24 ;
 

//check for deploy

if (scr_inBound(mpx,mpy))
    {
    if (object_is_ancestor( obj_map.terrains[mpx,mpy].object_index,obj_property))
        { 
        if  (   
            obj_map.terrains[mpx,mpy].name = "Base" 
            and obj_map.terrains[mpx,mpy].ownership = global.P_Turn.number 
            and obj_map.terrains[mpx,mpy].isStanding
            and obj_map.units[mpx,mpy] = 0 
            )
            {
            can_mouse_deploy = true;
            }
        }    
    }

//left click    
if(mouse_check_button_pressed(mb_left) and !menuExitDelay)
    {
    move_ready = false;
    mousePosX = mouse_x div 24
    mousePosY = mouse_y div 24
    
    if (scr_inBound(mousePosX,mousePosY))
        {
        //change curosr position
        x = (mousePosX)*24;
        y = (mousePosY)*24;
        
        global.posX = x div 24;
        global.posY = y div 24;
        
        //juice
        scr_cursorKey_juice(1,global.cursorKey_sfx);
        
        //check for ally unit
        if(obj_map.units[global.posX,global.posY] !=0)
            {
            if  ( 
                obj_map.units[global.posX,global.posY].ownership = global.P_Turn.number 
                and obj_map.units[global.posX,global.posY].state != "exhaust"
                )
                {
                //initiate move ready
                move_ready = true;
                }
            }
        }
        //turn off deploy icon
        cursor_icon = -1;
        
        //local property radio chech if terrain i sproperty
        if (object_is_ancestor(obj_map.terrains[global.posX,global.posY].object_index,obj_property))
            {
            scr_rangeCheck_reset();
            scr_updateLocalRadio(obj_map.terrains[global.posX,global.posY]);
            isOnGlobalRadioCheck = true;
            }
        
        else
            {
            //turn on global radio check
            scr_globalRadioCheck();
            isOnGlobalRadioCheck = true;
            }
        
        //set alarm for releas delay for deploy and syscom menus
        alarm[2] = 10;
        menu_ok = true;
    }
    
    
if(mouse_check_button(mb_left) and !menuExitDelay)
    {
    //turn off deploy icon
    cursor_icon = -1;
    //juice
    if (global.posX != mpx or global.posY != mpy) scr_cursorKey_juice(1,-1); //juice 
    
    mousePosX = mouse_x div 24
    mousePosY = mouse_y div 24
  
    if (scr_inBound(mousePosX,mousePosY) )
        {
        //change curosr position
        x = (mousePosX)*24;
        y = (mousePosY)*24;
        
        global.posX = x div 24;
        global.posY = y div 24;
        }
    if ( mouse_check_button(mb_right) and  obj_map.units[global.posX,global.posY] !=0 and move_ready )
        {
        //start unit Command
        x = (mousePosX)*24;
        y = (mousePosY)*24;
                        
        global.posX = x div 24;
        global.posY = y div 24;               
                        
        //move_ready_count=0;
        //detroy redundentcies
        instance_activate_object(obj_moveCursorMouse);
        with(obj_moveCursorMouse) instance_destroy();
        //create new instace
        instance_create(x,y,obj_moveCursorMouse);
        instance_deactivate_object(obj_battleCursor);
        move_ready = false;
        }
    }
        
    
if(mouse_check_button_released(mb_left))
    {
    isOnGlobalRadioCheck = false;
    scr_rangeCheck_reset();
    
    //reset unit radio check if applicable
    if obj_map.units[global.posX, global.posY] !=0
    scr_updateLocalRadio(obj_map.units[global.posX,global.posY]);
        
    //reset move ready
    move_ready = false;
    move_ready_count=0;
    }    
    
    
    
    
//right click
if(mouse_check_button_pressed(mb_right) and !mouse_check_button(mb_left) and !menuExitDelay)
    {
    mousePosX = mouse_x div 24
    mousePosY = mouse_y div 24
    if (scr_inBound(mousePosX,mousePosY) )
        {
        //move cursor
        x = (mousePosX)*24;
        y = (mousePosY)*24;
        global.posX = x div 24;
        global.posY = y div 24;
            
        //open deploy menu
        if  (
            obj_map.terrains[global.posX,global.posY].name = "Base" 
            and obj_map.terrains[global.posX,global.posY].ownership = global.P_Turn.number 
            and obj_map.terrains[global.posX,global.posY].isStanding
            and obj_map.units[global.posX,global.posY] = 0
            and mscroll = 0
            )
            {
            //Open Deploy menu!
            instance_create(0,0,obj_UI_deploy);
            instance_deactivate_object(obj_miniwin);
            instance_deactivate_object(obj_battleCursor);
            instance_deactivate_object(obj_topwin);    
            }
        else if (obj_map.units[global.posX,global.posY] = 0)
            {
            //open SystemMenu
            //check location is open
            instance_create(x+24,y,obj_syscom_system);
            instance_deactivate_object(obj_battleCursor);
            }
        else
            {
            //do move range check
            checking_attack_range = true;
            scr_attack_rance_check(obj_map.units[global.posX, global.posY]);
            }   
        }
    }
    
if(mouse_check_button_released(mb_right))
    {
    checking_attack_range = false;
    scr_rangeCheck_reset();
    }




</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mouse Nav

//check for unit radio (radio asist)
draw_radioAssist= false;
radioAssist_range = 0;
//draw RadioAssist if over visible unit
        if(scr_inBound(mpx,mpy))
            {
            if(obj_map.units[mpx,mpy] != 0)
                {
                if(obj_map.units[mpx,mpy].isVisible = true)
                    {
                    MouseOver_unit = obj_map.units[mpx,mpy];
                    //check radio range
                    if(MouseOver_unit.radio != 0)
                        {
                        radioAssist_range = MouseOver_unit.radio;
                        //check for CO effect
                        with obj_CO_0   
                            {
                            if(ownership = other.MouseOver_unit.ownership)
                                {
                                other.radioAssist_range += D2D_Radio;
                                if COP_on  other.radioAssist_range += COP_Radio;
                                if SCOP_on  other.radioAssist_range += SCOP_Radio;
                                }
                            }
                        //add mountain range
                        if(obj_map.terrains[mpx,mpy].name = "Mountain" and MouseOver_unit.radio != 0 )
                            {
                            radioAssist_range += 2;
                            }
                        //set graphic type
                        draw_radioAssist = true;
                        if   MouseOver_unit.isStanding radioAssist_sprite = spr_radioAssist_gold;
                        else radioAssist_sprite = spr_radioAssist_darkBlue;
                        }
                    }
                }
            }

// this fixes attack range check somhow ?????? (I dont understand, it might bite me in the but later, please send help)            
if(checking_attack_range)
{
if(obj_map.units[global.posX, global.posY] != 0)
scr_attack_rance_check(obj_map.units[global.posX, global.posY]);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///check for deploy

//reset icon
cursor_icon = -1;

//check if target is BASE and no unit is present 
if (obj_map.terrains[global.posX,global.posY].name == "Base" and obj_map.units[global.posX,global.posY] == 0)
    {
    //check if is ally base
    if (obj_map.terrains[global.posX,global.posY].ownership = global.P_Turn.number and obj_map.terrains[global.posX,global.posY].isStanding )
        {
        //set Deploy Icon to variable called in DRAW 
        if (global.cursorFrame == 2 || global.cursorFrame == 1)
            {
            cursor_icon = 5; 
            }
        else{
        cursor_icon = -1;
        }
        //Open Deploy menu!
        if (keyboard_check_pressed(global.keyCONFIRM) and obj_map.units[global.posX,global.posY] =0)
            {
            cursor_icon = -1;
            }
        }
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Open System, deploy menu,  start unit command, enemy or idle unit move range check


if ( keyboard_check_pressed( global.keyCONFIRM) and menuExitDelay = false )
    {
    //check if terrain is open
    if ( obj_map.units[global.posX,global.posY] = 0)
        {
        //if terrain is base owned by player
        if  ( 
            obj_map.terrains[global.posX,global.posY].name = "Base" and 
            obj_map.terrains[global.posX,global.posY].ownership = global.P_Turn.number and obj_map.terrains[global.posX,global.posY].isStanding
            )
            {
            //Open Deploy menu!
            instance_create(0,0,obj_UI_deploy);
            instance_deactivate_object(obj_miniwin);
            instance_deactivate_object(obj_battleCursor);
            instance_deactivate_object(obj_topwin);
            }
        
        //if terrain is anything else
        else 
            {
            //open system menu
            instance_create(x+24,y,obj_syscom_system);
            instance_deactivate_object(obj_battleCursor);
            }
        }
    //else unit exsist
    else 
        {
        //if unit is visible
        if (obj_map.units[global.posX,global.posY].isVisible)
            { 
            //ally unit
            if  (
                obj_map.units[global.posX,global.posY].ownership = global.P_Turn.number and
                obj_map.units[global.posX,global.posY].state = "idle"
                )
                {
                //start unit command
                instance_activate_object(obj_moveCursor);
                with(obj_moveCursor)
                    { 
                    instance_destroy();
                    }
                instance_create(x,y,obj_moveCursor);
                instance_deactivate_object(obj_battleCursor);
                }
            
            //enemy unit
            else
                {
                //switch to enemy move range check cursor
                scr_updateLocalMove(obj_map.units[global.posX,global.posY]);
                checking_move_range = true;
                } 
            }
            
        //unit is not visible
        else
            {
            //open system menu
            instance_create(x+24,y,obj_syscom_system);
            instance_deactivate_object(obj_battleCursor);
            }
        }
    }
    
    
if ( keyboard_check_released( global.keyCONFIRM) )
    {
    scr_rangeCheck_reset();
    checking_move_range = false;
    //reset unit radio check if applicable
    if obj_map.units[global.posX, global.posY] !=0
    scr_updateLocalRadio(obj_map.units[global.posX,global.posY]);
    }



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///property and global radio test

if keyboard_check_pressed(vk_space)
    {
    scr_rangeCheck_reset();
    
    //check for property
    if object_is_ancestor(obj_map.terrains[global.posX,global.posY].object_index, obj_property)
        {
        scr_updateLocalRadio(obj_map.terrains[global.posX,global.posY]);
        isOnGlobalRadioCheck = true;
        }
    
    // else if no units exsist    
    else
        {
        scr_globalRadioCheck();
        isOnGlobalRadioCheck = true; 
        } 
    }
    
if keyboard_check_released(vk_space)
    {
    isOnGlobalRadioCheck = false;
    scr_rangeCheck_reset();
    
    //reset unit radio check if applicable
    if obj_map.units[global.posX, global.posY] !=0
    scr_updateLocalRadio(obj_map.units[global.posX,global.posY]);
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///update global terrain and unit checker

// to be used with miniwin. aux stats and intel, and various unit actions

global.terrain_check = obj_map.terrains[global.posX,global.posY];
global.unit_check = obj_map.units[global.posX,global.posY];
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// B - attack range and quick view move 

if (keyboard_check_pressed(global.keyCANCEL))
    {
    
    //attack Range check if over unit
    if (obj_map.units[global.posX, global.posY] != 0)
        {
        if obj_map.units[global.posX, global.posY].isVisible
            {
            //do move range check
            checking_attack_range = true;
            scr_attack_rance_check(obj_map.units[global.posX, global.posY]);
            }
        }
    if( !checking_attack_range )fast_scroll_on = true;    
    }

if (keyboard_check_released(global.keyCANCEL) or mouse_check_button_released(mb_right))
    {
    fast_scroll_on = false;
    checking_attack_range = false;
    scr_rangeCheck_reset();
    
    //reset unit radio check if applicable
    if obj_map.units[global.posX, global.posY] !=0
    scr_updateLocalRadio(obj_map.units[global.posX,global.posY]);
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///curosr Radio asist check

c_radioAssist_on = false;
c_radioAssist_sprite = -1;
c_radioAssist_range = 0;


if(scr_inBound(global.posX,global.posY))
    {
    if(obj_map.units[global.posX,global.posY] !=0)
        {
        if(obj_map.units[global.posX,global.posY].isVisible)
            {
            //switch radioAssist on
            c_radioAssist_on = true;
            //check Standing
            if (obj_map.units[global.posX,global.posY].isStanding) c_radioAssist_sprite = spr_radioAssist_gold;
            else c_radioAssist_sprite = spr_radioAssist_darkBlue;
            //chack range
            c_radioAssist_range = scr_getUnitRadioRange(obj_map.units[global.posX,global.posY] ,obj_map.terrains[global.posX,global.posY]);
            }
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="120">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///COP full charge for debug

with(global.P_Turn.CO)
    {
    if (charge &lt; (COP_Bar*star_value)+(SCOP_Bar*star_value))  charge +=10; //(COP_Bar*1000)+(SCOP_Bar*1000);
        
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug

draw_text( 12,12, string( global.rangeCheck[global.posX, global.posY].rb_edge));
draw_text( 12,24, string( global.rangeCheck[global.posX, global.posY].rb_corner));
draw_text( 12,36, string( global.rangeCheck[global.posX, global.posY].rb_fill_v));
draw_text( 12,48, string( global.rangeCheck[global.posX, global.posY].rb_fill_h));


//draw_text(12,48+12*2,"P2 CO Zone: " + string(global.rangeCheck[global.posX,global.posY].CO_Zone[2]));
//draw_text(12,48+12*3,"P4 CO Zone: " + string(global.rangeCheck[global.posX,global.posY].CO_Zone[4]));
/*
draw_text(12,48+12,"X: " + string(global.posX));
draw_text(12,48+12*2,"X: " + string(global.posY));

if scr_inBound(global.posX,global.posY)
    {
    if (obj_map.units[global.posX, global.posY] !=0 )
        {
        draw_text(12,48+12*6,"Standing: " + string(obj_map.units[global.posX, global.posY].isStanding));
        draw_text(12,48+12*7,"sprite  : " + string(c_radioAssist_sprite));
        }
    }
    
draw_text(12,48+12*9,"X: " + string(checking_attack_range));


/*
unit_selection      = obj_map.units[global.posX,global.posY];
terrain_selection   = obj_map.terrains[global.posX,global.posY];

if (global.Phaze = "Main" and unit_selection != 0){
    if (unit_selection.isVisible){
    
        draw_text(12,120, "HP hidden?" + string( obj_map.units[global.posX,global.posY].HP_hidden));

        }
}
//draw_text(12, 240,  string(obj_map.units[ x div 24, y div 24]));

/*

//Scal GUI
display_set_gui_size(768, 432);
 
unit_selection      = obj_map.units[global.posX,global.posY];
terrain_selection   = obj_map.terrains[global.posX,global.posY];

if (global.Phaze = "Main" and unit_selection != 0){
    if (unit_selection.isVisible){
        draw_text(12,84, string_upper(unit_selection.name));
        draw_text(12,96,"HP: " + string(unit_selection.hp)+"/10");
        draw_text(12,108,"Fuel: " + string(unit_selection.fuel)+"/"+string(unit_selection.max_fuel));
        draw_text(12,120,"Ammo: " + string(unit_selection.ammo)+"/"+string(unit_selection.max_ammo));
        
        if (unit_selection.capturing &gt; 0) draw_text(12,144,"Capture: " + string(unit_selection.capturing) +"/20");
        
        if (unit_selection.name = "A.P.C."){
            if (unit_selection.load_A != 0) draw_text(12,144, "Load A: " +  string(unit_selection.load_A.name));
            if (unit_selection.load_B != 0) draw_text(12,158, "Load B: " +  string(unit_selection.load_B.name));
            }
        }
    }
    
   */
   
//  draw_text( 12,12, "[" + string(x) + "," + string(y) + "]" ); 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Mouse Pointer

//draw_text(12,200, string(mscroll));   

if (dmscroll != -1)
    {
    draw_sprite(spr_mouseViewScrole, dmscroll, mouse_x, mouse_y);
    }
    
else
    {     
    //draw deploy
    if can_mouse_deploy 
    draw_sprite(spr_basicCursor_Icons,5, (mouse_x div 24)*24, (mouse_y div 24) *24);
    
    //draw pointer
    draw_sprite(spr_mousePointer,global.P_Turn.number - 1, mouse_x, mouse_y);
    //draw RadioAssist if over visible unit
    if(draw_radioAssist)
        {
        scr_draw_radioAssist(mouse_x div 24,mouse_y div 24,radioAssist_range,radioAssist_sprite); 
        }
    }
    


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw order and animation

scr_draw_radioAssist(global.posX,global.posY,c_radioAssist_range,c_radioAssist_sprite); 
 
draw_self();

if (cursor_icon == 5 ){
    draw_sprite(spr_basicCursor_Icons,5,x,y);
    }




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="115">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///load end of turn save
room_goto(rm_continue);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
