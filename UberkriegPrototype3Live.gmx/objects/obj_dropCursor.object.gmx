<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_basicCursor</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initiate
global.last_network_event = "drop curosr created";

//depth
depth = UI_DEPTH_CURSOR;
//stop animation
image_speed = 0
//set position


//set alarm to Cursor move speed
alarm[1] = 0;
//view control speed - should be divisable by 24
view_speed = 8;
//view boarder to cursor
view_border = 2*24;

//clear targetables
ds_list_clear(global.targetables);

//switches for drawing drop zones
drop_north_ok = false;
drop_east_ok = false;
drop_south_ok = false;
drop_west_ok = false;

 
//check for open  adjacent terrain

//check north ( open and valid terrain)
if(scr_inBound(global.posX+0, global.posY-1)){
    if(scr_check_move_cost(global.target_unit, obj_map.terrains[global.posX+0, global.posY-1]) != 99 ){
        //check for unit is in place
        if (obj_map.units[global.posX+0, global.posY-1] != 0){
            if (obj_map.units[global.posX+0, global.posY-1].isVisible){
                //visible unit, ally or enemy, do not add destination to list
                }
            else{
                //unit not visible , add new location to drop list
                //global.rangeCheck[global.posX+0, global.posY-1].sprite_index =  spr_rangecheck_clear;
                drop_north_ok = true;
                ds_list_add(global.targetables, global.rangeCheck[global.posX+0, global.posY-1]);
                }
            } 
        else{
            //no unit at destination, add new locatin to list
            //global.rangeCheck[global.posX+0, global.posY-1].sprite_index =  spr_rangecheck_clear;
            drop_north_ok = true;
            ds_list_add(global.targetables, global.rangeCheck[global.posX+0, global.posY-1]);
            } 
        }
    }
    

    
//check east
if(scr_inBound(global.posX+1, global.posY-0))
    {
    if(scr_check_move_cost(global.target_unit, obj_map.terrains[global.posX+1, global.posY-0]) != 99 )
        {
        //check for unit is in place
        if (obj_map.units[global.posX+1, global.posY-0] != 0)
            {
            if (obj_map.units[global.posX+1, global.posY-0].isVisible)
                {
                //visible unit, ally or enemy, do not add destination to list
                }
            else
                {
                //unit not visible , add new location to drop list
               //global.rangeCheck[global.posX+1, global.posY-0].sprite_index =  spr_rangecheck_clear;
                drop_east_ok = true;
                ds_list_add(global.targetables, global.rangeCheck[global.posX+1, global.posY-0]);
                }
            } 
        else
            {
            //no unit at destination, add new locatin to list
            //global.rangeCheck[global.posX+1, global.posY-0].sprite_index =  spr_rangecheck_clear;
            drop_east_ok = true;
            ds_list_add(global.targetables, global.rangeCheck[global.posX+1, global.posY-0]);
            } 
        }
    }
    
     
//check south
if(scr_inBound(global.posX+0, global.posY+1))
    {
    if(scr_check_move_cost(global.target_unit, obj_map.terrains[global.posX+0, global.posY+1]) != 99 )
        {
        //check for unit is in place
        if (obj_map.units[global.posX+0, global.posY+1] != 0)
            {
            if (obj_map.units[global.posX+0, global.posY+1].isVisible)
                {
                //visible unit, ally or enemy, do not add destination to list
                }
            else
                {
                //unit not visible , add new location to drop list
                //global.rangeCheck[global.posX+0, global.posY+1].sprite_index =  spr_rangecheck_clear;
                drop_south_ok = true;
                ds_list_add(global.targetables, global.rangeCheck[global.posX+0, global.posY+1]);
                }
            } 
        else
            {
            //no unit at destination, add new locatin to list
            //global.rangeCheck[global.posX+0, global.posY+1].sprite_index =  spr_rangecheck_clear;
            drop_south_ok = true;
            ds_list_add(global.targetables, global.rangeCheck[global.posX+0, global.posY+1]);
            } 
        }
    }
    
//check west
if(scr_inBound(global.posX-1, global.posY-0))
    {
    if(scr_check_move_cost(global.target_unit, obj_map.terrains[global.posX-1, global.posY-0]) != 99 ){
        //check for unit is in place
        if (obj_map.units[global.posX-1, global.posY-0] != 0){
            if (obj_map.units[global.posX-1, global.posY-0].isVisible){
                //visible unit, ally or enemy, do not add destination to list
                }
            else{
                //unit not visible , add new location to drop list
                //global.rangeCheck[global.posX-1, global.posY-0].sprite_index =  spr_rangecheck_clear;
                drop_west_ok = true;
                ds_list_add(global.targetables, global.rangeCheck[global.posX-1, global.posY-0]);
                }
            } 
        else{
            //no unit at destination, add new locatin to list
            //global.rangeCheck[global.posX-1, global.posY-0].sprite_index =  spr_rangecheck_clear;
            drop_west_ok = true;
            ds_list_add(global.targetables, global.rangeCheck[global.posX-1, global.posY-0]);
            } 
        }
    }
    

//move to first targetable location and initiate navigation variables    
drop_zone_index = 0;
drop_zone_list_size = ds_list_size(global.targetables);
    
drop_zone = ds_list_find_value(global.targetables,0); 
x = drop_zone.x;
y = drop_zone.y;   

//radio assist range
RA_range = 0; 













</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initiate alarm for cursor controls
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///animate
image_index = global.cursorFrameIndex




</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///navigation

//      check for key delay on press
if (global.ip_up_pressed   ||
    global.ip_down_pressed ||
    global.ip_left_pressed ||
    global.ip_right_pressed){
        global.cursorKey_delay = global.cursorKey_startspeed;
        }
        
//      reset key delay on release
if (global.ip_up_released   ||
    global.ip_down_released ||
    global.ip_left_released ||
    global.ip_right_released){
        alarm[1] = 0;
        global.cursorKey_delay = global.cursorKey_startspeed ;
        }
// arrow key actions and juice        
if (alarm[1] = -1 )
    {
    switch(global.ip_nav)
        {
        case(0):
            alarm[1] = 0;
            global.cursorkey_delay = global.cursorKey_startspeed ;
            break;
        
        case 8 :
           // if ( global.posY &gt; 0 ) 
                if (drop_zone_index = 0){
                    drop_zone_index = drop_zone_list_size -1;
                    }
            else drop_zone_index -=1;
            
            global.cursorkey_delay = global.cursorKey_startspeed ;
            drop_zone = ds_list_find_value( global.targetables,drop_zone_index);
            x = drop_zone.x ;
            y = drop_zone.y ;
            scr_cursorKey_juice(1,global.cursorKey_sfx);
            break;
        
        case 2 :
            //if ( global.posY &gt; 0 ) 
                if (drop_zone_index = drop_zone_list_size -1){
                    drop_zone_index = 0;
                    }
            else drop_zone_index +=1;
            
            global.cursorkey_delay = global.cursorKey_startspeed ;
            drop_zone = ds_list_find_value( global.targetables,drop_zone_index);
            x = drop_zone.x ;
            y = drop_zone.y ;
            scr_cursorKey_juice(1,global.cursorKey_sfx);
            break;
        
        case 4 :
            //if ( global.posY &gt; 0 ) 
                if (drop_zone_index = 0){
                    drop_zone_index = drop_zone_list_size -1;
                    }
            else drop_zone_index -=1;
            
            global.cursorkey_delay = global.cursorKey_startspeed ;
            drop_zone = ds_list_find_value( global.targetables,drop_zone_index);
            x = drop_zone.x ;
            y = drop_zone.y ;
            scr_cursorKey_juice(1,global.cursorKey_sfx);
            break;  
                    
        case 6 :
            //if ( global.posY &gt; 0 ) 
                if (drop_zone_index = drop_zone_list_size -1){
                    drop_zone_index = 0;
                    }
            else drop_zone_index +=1;
            
            global.cursorkey_delay = global.cursorKey_startspeed ;
            drop_zone = ds_list_find_value( global.targetables,drop_zone_index);
            x = drop_zone.x ;
            y = drop_zone.y ;
            scr_cursorKey_juice(1,global.cursorKey_sfx);
            break;
              
        }
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///navigate by mouse

if mouse_check_button_pressed(mb_left){
    //positions to check
    var mousecheck_pos_x = mouse_x div 24 ;
    var mousecheck_pos_y = mouse_y div 24 ;
    var target_check = -1;
    //check map bounderies
    if (scr_inBound(mousecheck_pos_x,mousecheck_pos_y)){
        //if target is already confirmed, engage
        //check if mous pos match target pose
        if ((mousecheck_pos_x = target_check.x div 24 and mousecheck_pos_y = target_check.y div 24)){
            //execute
            global.destination = drop_zone;
            if global.drop_phaze_2 {
                if global.action_order = "drop_A" scr_exe_drop("A");
                if global.action_order = "drop_B" scr_exe_drop("B");
                global.drop_phaze_2 = false;
                
                ///send custom script for phase 2 drop
                if (global.net_mode = 2 and global.Local_Player = global.P_Turn.number){
                global.last_network_event = "net drop phaze 2 script sent";
                    ds_map_clear(global.map_out)
                    ds_map_add(global.map_out,"scr","net_dp2"); // network script - drop phaze 2
                    //acting unit
                    ds_map_add(global.map_out,"act_x",global.acting_unit.x div 24);
                    ds_map_add(global.map_out,"act_y",global.acting_unit.y div 24);
                    //drop zone 2
                    ds_map_add(global.map_out,"drop_x",drop_zone.x div 24);
                    ds_map_add(global.map_out,"drop_y",drop_zone.y div 24);
                    scr_send(global.map_out,"host");
                    }
                }
            else instance_create(0,0,obj_execute_unit_orders);
            instance_destroy();
            }
        else {
            //for each unit in targetables, check if pos match
            var i = 0;
            for (i = 0 ; i &lt; drop_zone_list_size ; i++){
                target_check =  ds_list_find_value( global.targetables,i);     
                //if  mouse and target pos match
                if (mousecheck_pos_x = target_check.x div 24 and mousecheck_pos_y = target_check.y div 24){                         
                    drop_zone = target_check;
                    x = drop_zone.x ;
                    y = drop_zone.y ;
                    scr_cursorKey_juice(1,global.cursorKey_sfx);
                    break;
                    }
                }
            }
        }
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// view control


// check for boarders and move 

if ( view_xview[0] &gt; x - view_border and global.canScroll_x) view_xview[0] -= view_speed;

if ( view_xview[0] + view_wport[0] &lt; x + view_border + 24 and global.canScroll_x) view_xview[0] += view_speed;

if ( view_yview[0] &gt; y - view_border and global.canScroll_y) view_yview[0] -= view_speed;

if ( view_yview[0] + view_hport[0] &lt; y + view_border+24 and global.canScroll_y) view_yview[0] += view_speed;


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///confirm

if global.ip_A_pressed{
    global.destination = drop_zone;
    //change destination for netwoek modes
    //ds_map_replace(global.net_unit_orders,"des_x",drop_zone.x div 24);
    //ds_map_replace(global.net_unit_orders,"des_y",drop_zone.y div 24);
    if global.drop_phaze_2 {
    global.last_network_event = "confirm phaze 2";
        if global.action_order = "drop_A" scr_exe_drop("A");
        if global.action_order = "drop_B" scr_exe_drop("B");
        global.drop_phaze_2 = false;
        
        //send custom script for phase 2 drop
        if (global.net_mode = 2 and global.Local_Player = global.P_Turn.number){
        global.last_network_event = "net drop phaze 2 script sent";
            ds_map_clear(global.map_out)
            ds_map_add(global.map_out,"scr","net_dp2"); // network script - drop phaze 2
            //acting unit
            ds_map_add(global.map_out,"act_x",global.acting_unit.x div 24);
            ds_map_add(global.map_out,"act_y",global.acting_unit.y div 24);
            //drop zone 2
            ds_map_add(global.map_out,"drop_x",drop_zone.x div 24);
            ds_map_add(global.map_out,"drop_y",drop_zone.y div 24);
            scr_send(global.map_out,"host");
            }
        }
    else{
        instance_create(0,0,obj_execute_unit_orders);
        }
    instance_destroy();
    }
    
    
/*

global.target_unit = obj_map.units[ x div 24 , y div 24 ];
     global.target_unit.hp -= (dmg_percent + random(global.acting_unit.hp)) div 10  ;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// cancel to re-activate command menu

if (global.ip_B_pressed or mouse_check_button_pressed(mb_right))
    {
    instance_create(x,y,obj_syscom_command);
    instance_destroy();
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///update miniwin targets - terrain only

///update miniwin targets

global.terrain_check = obj_map.terrains[x div 24,y div 24];

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///get radio assist range
RA_range = scr_getUnitRadioRange(global.target_unit,obj_map.terrains[x div 24,y div 24]) ;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw drop zones (clear highlight)
drop_from_x = global.destination.x;
drop_from_y = global.destination.y;
if global.drop_phaze_2 {
    drop_from_x = global.acting_unit.x;
    drop_from_y = global.acting_unit.y;
    
    } 

if drop_north_ok    draw_sprite(spr_rangecheck_clear, global.rangeCheckerFramIndex,drop_from_x + 00, drop_from_y - 24);
if drop_east_ok     draw_sprite(spr_rangecheck_clear, global.rangeCheckerFramIndex,drop_from_x + 24, drop_from_y - 00);
if drop_south_ok    draw_sprite(spr_rangecheck_clear, global.rangeCheckerFramIndex,drop_from_x + 00, drop_from_y + 24);
if drop_west_ok     draw_sprite(spr_rangecheck_clear, global.rangeCheckerFramIndex,drop_from_x - 24, drop_from_y - 00);

scr_draw_radioAssist(x div 24 , y div 24 ,RA_range,spr_radioAssist_gold);

//north
if (drop_zone.y div 24 &lt; global.posY and (global.cursorFrame=1 or global.cursorFrame=2)) draw_sprite(global.target_unit.sprite_index,0,x,y);//draw_sprite( spr_basicCursor_Icons,8,x,y);
//east
if (drop_zone.x div 24 &gt; global.posX and (global.cursorFrame=1 or global.cursorFrame=2)) draw_sprite(global.target_unit.sprite_index,0,x,y);//draw_sprite( spr_basicCursor_Icons,8,x,y);
//south
if (drop_zone.y div 24 &gt; global.posY and (global.cursorFrame=1 or global.cursorFrame=2)) draw_sprite(global.target_unit.sprite_index,0,x,y);//draw_sprite( spr_basicCursor_Icons,8,x,y);
//west
if (drop_zone.x div 24 &lt; global.posX and (global.cursorFrame=1 or global.cursorFrame=2)) draw_sprite(global.target_unit.sprite_index,0,x,y);//draw_sprite( spr_basicCursor_Icons,8,x,y);


draw_self();

//draw mouse
draw_sprite(spr_mousePointer,global.P_Turn.number - 1, mouse_x, mouse_y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
