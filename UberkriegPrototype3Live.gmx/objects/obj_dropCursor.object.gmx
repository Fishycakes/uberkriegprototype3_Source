<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_basicCursor</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initiate

//depth
depth = UI_DEPTH_CURSOR;
//stop animation
image_speed = 0
//set position


//set alarm to Cursor move speed
alarm[1] = 0;
//view control speed - should be divisable by 24
view_speed = 8;
//view boarder to cursor
view_border = 4*24;

//clear targetables
 
//check for open  adjacent terrain
//check north ( open and valid terrain)
if(obj_map.units[global.posX+0, global.posY-1] = 0 and scr_check_move_cost(global.target_unit, 
obj_map.terrains[global.posX+0, global.posY-1]) != 99 ){
    //add node to list
    global.rangeCheck[global.posX+0, global.posY-1].sprite_index =  spr_rangecheck_clear;
    ds_list_add(global.targetables, global.rangeCheck[global.posX+0, global.posY-1]);
    }
//check east
if(obj_map.units[global.posX+1, global.posY-0] = 0 and scr_check_move_cost(global.target_unit, 
obj_map.terrains[global.posX+1, global.posY-0]) != 99 ){
    //add node to list
    global.rangeCheck[global.posX+1, global.posY-0].sprite_index =  spr_rangecheck_clear;
    ds_list_add(global.targetables, global.rangeCheck[global.posX+1, global.posY-0]);
    }  
//check south
if(obj_map.units[global.posX+0, global.posY+1] = 0 and scr_check_move_cost(global.target_unit, 
obj_map.terrains[global.posX+0, global.posY+1]) != 99 ){
    //add node to list
    global.rangeCheck[global.posX+0, global.posY+1].sprite_index =  spr_rangecheck_clear;
    ds_list_add(global.targetables, global.rangeCheck[global.posX+0, global.posY+1]);
    }
//check west
if(obj_map.units[global.posX-1, global.posY-0] = 0 and scr_check_move_cost(global.target_unit, 
obj_map.terrains[global.posX-1, global.posY-0]) != 99 ){
    //add node to list
    global.rangeCheck[global.posX-1, global.posY-0].sprite_index =  spr_rangecheck_clear;
    ds_list_add(global.targetables, global.rangeCheck[global.posX-1, global.posY-0]);
    }

//move to first targetable location and initiate navigation variables    
drop_zone_index = 0;
drop_zone_list_size = ds_list_size(global.targetables);
    
drop_zone = ds_list_find_value(global.targetables,0); 
x = drop_zone.x;
y = drop_zone.y;    













</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initiate alarm for cursor controls
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///animate
image_index = global.cursorFrameIndex




</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Navigation by arrow keys


//      check for key delay on press
if (    keyboard_check_pressed(vk_up   ) ||
        keyboard_check_pressed(vk_down ) ||
        keyboard_check_pressed(vk_left ) ||
        keyboard_check_pressed(vk_right) )
        {
        global.cursorKey_delay = global.cursorKey_startspeed ;
        }
//      reset key delay on release
if (    keyboard_check_released(vk_up   ) ||
        keyboard_check_released(vk_down ) ||
        keyboard_check_released(vk_left ) ||
        keyboard_check_released(vk_right) )
        {
        alarm[1] = 0;
        global.cursorKey_delay = global.cursorKey_startspeed ;
        }
// arrow key actions and juice        
if (alarm[1] = -1 )
    {
    switch(keyboard_key)
        {
        case(vk_nokey):
            alarm[1] = 0;
            global.cursorkey_delay = global.cursorKey_startspeed ;
            break;
        
        case vk_up :
            if ( global.posY &gt; 0 ) 
                if (drop_zone_index = 0){
                    drop_zone_index = drop_zone_list_size -1;
                    }
            else drop_zone_index -=1;
            
            global.cursorkey_delay = global.cursorKey_startspeed ;
            drop_zone = ds_list_find_value( global.targetables,drop_zone_index);
            x = drop_zone.x ;
            y = drop_zone.y ;
            scr_cursorKey_juice(1,global.cursorKey_sfx);
            break;
        
        case vk_down :
            if ( global.posY &gt; 0 ) 
                if (drop_zone_index = drop_zone_list_size -1){
                    drop_zone_index = 0;
                    }
            else drop_zone_index +=1;
            
            global.cursorkey_delay = global.cursorKey_startspeed ;
            drop_zone = ds_list_find_value( global.targetables,drop_zone_index);
            x = drop_zone.x ;
            y = drop_zone.y ;
            scr_cursorKey_juice(1,global.cursorKey_sfx);
            break;
        
        case vk_left :
            if ( global.posY &gt; 0 ) 
                if (drop_zone_index = 0){
                    drop_zone_index = drop_zone_list_size -1;
                    }
            else drop_zone_index -=1;
            
            global.cursorkey_delay = global.cursorKey_startspeed ;
            drop_zone = ds_list_find_value( global.targetables,drop_zone_index);
            x = drop_zone.x ;
            y = drop_zone.y ;
            scr_cursorKey_juice(1,global.cursorKey_sfx);
            break;  
                    
        case vk_right :
            if ( global.posY &gt; 0 ) 
                if (drop_zone_index = drop_zone_list_size -1){
                    drop_zone_index = 0;
                    }
            else drop_zone_index +=1;
            
            global.cursorkey_delay = global.cursorKey_startspeed ;
            drop_zone = ds_list_find_value( global.targetables,drop_zone_index);
            x = drop_zone.x ;
            y = drop_zone.y ;
            scr_cursorKey_juice(1,global.cursorKey_sfx);
            break;
              
        }
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// view control


// check for boarders and move 
if ( view_xview[0] &gt; x - view_border) view_xview[0] -= view_speed;

if ( view_xview[0] + view_wport[0] &lt; x + view_border + 24) view_xview[0] += view_speed;

if ( view_yview[0] &gt; y - view_border) view_yview[0] -= view_speed;

if ( view_yview[0] + view_hport[0] &lt; y + view_border+24) view_yview[0] += view_speed;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///confirm

if keyboard_check_pressed(global.keyCONFIRM){
    global.destination = drop_zone;
    if global.drop_phaze_2 {
        if global.action_order = "drop_A" scr_exe_drop("A");
        if global.action_order = "drop_B" scr_exe_drop("B");
        global.drop_phaze_2 = false;
        }
    else{
        instance_create(0,0,obj_execute_unit_orders);
        }
    instance_destroy();
    }
    
    
/*

global.target_unit = obj_map.units[ x div 24 , y div 24 ];
     global.target_unit.hp -= (dmg_percent + random(global.acting_unit.hp)) div 10  ;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// cancel to re-activate command menu

if keyboard_check_pressed (global.keyCANCEL){
    instance_create(x,y,obj_syscom_command);
    instance_destroy();
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
