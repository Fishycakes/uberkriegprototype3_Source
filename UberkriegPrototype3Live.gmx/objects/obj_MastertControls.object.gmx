<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initiate , key config, colours

/*
this object coltrols global stuff:

F12: full screen
Global cursor animation

*/

//mode spesific thing

global.mode = "Start Game";

//this variable is used to animate cursors 
global.cursorFrame = 1;
global.cursorFrameIndex = 1;
alarm[0] = 2 ;

//this cariable used to animate anything that blinks
global.blinking = true;
alarm[1] = 2 ;

//Key juice variables
global.cursorKey_startspeed   = 15;
global.cursorKey_delay        = 15;
global.cursorKey_accel        =  1;
global.cursorKey_topspeed     =  3;
global.cursorKey_popFrame     =  6;
global.cursorKey_sfx = sfx_TypeWritterKey_1 ;

// Key colours
global.c_uiWhite = make_colour_rgb(250,250,250);

//Button config
global.keyCONFIRM   = ord("Z");
global.keyCANCEL    = ord("X");

global.keyRADIO     = vk_space;
global.keyAUX       = ord("C");

global.keyUP        = vk_up;
global.keyDOWN      = vk_down;
global.keyLEFT      = vk_left;
global.keyRIGHT     = vk_right;

//Dynamic Text: set colour, font, &amp; align
global.c_uiWhite    = make_colour_rgb(200,200,200);
global.c_uiBaseGrey = make_colour_rgb(44,41,38);
global.c_uiLineGrey = make_colour_rgb(100,100,100);
global.c_uiGold     = make_colour_rgb(218,191,112);

draw_set_font(ft_AuroraEx);
draw_set_colour(global.c_uiWhite);
draw_set_halign(fa_left);

global.window_size = 1;





</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Damage charts

//Primary [defender,attacker]

//  01. L_Inf         02. H_Inf         03. L.Gun         04. Officer       05. Recon         06. APC           07. L_Tank        08. Artillery     09. Anti-air      10. Covert_Op     11. H_Tank        12. Rocket        13. Land_Cruiser / X by Y
    DMG_P[01,01]= -1; DMG_P[02,01]= -1; DMG_P[03,01]= -1; DMG_P[04,01]= -1; DMG_P[05,01]= -1; DMG_P[06,01]= -1; DMG_P[07,01]= -1; DMG_P[08,01]= -1; DMG_P[09,01]= -1; DMG_P[10,01]= -1; DMG_P[11,01]= -1; DMG_P[12,01]= -1; DMG_P[13,01]= -1; // 01. L_Inf      
    DMG_P[01,02]= -1; DMG_P[02,02]= -1; DMG_P[03,02]= -1; DMG_P[04,02]= -1; DMG_P[05,02]= 85; DMG_P[06,02]= 75; DMG_P[07,02]= 55; DMG_P[08,02]= 70; DMG_P[09,02]= 55; DMG_P[10,02]= 85; DMG_P[11,02]= 15; DMG_P[12,02]= 85; DMG_P[13,02]=  5; // 02. H_Inf    
    DMG_P[01,03]=115; DMG_P[02,03]= 85; DMG_P[03,03]= 85; DMG_P[04,03]= 85; DMG_P[05,03]= 45; DMG_P[06,03]= 40; DMG_P[07,03]= 30; DMG_P[08,03]= 45; DMG_P[09,03]= 30; DMG_P[10,03]= 45; DMG_P[11,03]=  5; DMG_P[12,03]= 55; DMG_P[13,03]=  3; // 03. L.Gun  
    DMG_P[01,04]= -1; DMG_P[02,04]= -1; DMG_P[03,04]= -1; DMG_P[04,04]= -1; DMG_P[05,04]= -1; DMG_P[06,04]= -1; DMG_P[07,04]= -1; DMG_P[08,04]= -1; DMG_P[09,04]= -1; DMG_P[10,04]= -1; DMG_P[11,04]= -1; DMG_P[12,04]= -1; DMG_P[13,04]= -1; // 04. Officer 
    DMG_P[01,05]= -1; DMG_P[02,05]= -1; DMG_P[03,05]= -1; DMG_P[04,05]= -1; DMG_P[05,05]= -1; DMG_P[06,05]= -1; DMG_P[07,05]= -1; DMG_P[08,05]= -1; DMG_P[09,05]= -1; DMG_P[10,05]= -1; DMG_P[11,05]= -1; DMG_P[12,05]= -1; DMG_P[13,05]= -1; // 05. Recon
    DMG_P[01,06]= -1; DMG_P[02,06]= -1; DMG_P[03,06]= -1; DMG_P[04,06]= -1; DMG_P[05,06]= -1; DMG_P[06,06]= -1; DMG_P[07,06]= -1; DMG_P[08,06]= -1; DMG_P[09,06]= -1; DMG_P[10,06]= -1; DMG_P[11,06]= -1; DMG_P[12,06]= -1; DMG_P[13,06]= -1; // 06. APC
    DMG_P[01,07]= -1; DMG_P[02,07]= -1; DMG_P[03,07]= -1; DMG_P[04,07]= -1; DMG_P[05,07]= 85; DMG_P[06,07]= 75; DMG_P[07,07]= 55; DMG_P[08,07]= 70; DMG_P[09,07]= 75; DMG_P[10,07]= 85; DMG_P[11,07]= 15; DMG_P[12,07]= 85; DMG_P[13,07]=  5; // 07. L_Tank
    DMG_P[01,08]= 90; DMG_P[02,08]= 85; DMG_P[03,08]= 90; DMG_P[04,08]= 85; DMG_P[05,08]= 80; DMG_P[06,08]= 70; DMG_P[07,08]= 60; DMG_P[08,08]= 75; DMG_P[09,08]= 65; DMG_P[10,08]= 80; DMG_P[11,08]= 30; DMG_P[12,08]= 80; DMG_P[13,08]= 10; // 08. Artillery
    DMG_P[01,09]=120; DMG_P[02,09]=105; DMG_P[03,09]=120; DMG_P[04,09]=105; DMG_P[05,09]= 60; DMG_P[06,09]= 50; DMG_P[07,09]= 15; DMG_P[08,09]= 50; DMG_P[09,09]= 45; DMG_P[10,09]= 60; DMG_P[11,09]=  5; DMG_P[12,09]= 55; DMG_P[13,09]=  2; // 09. Anti-Air
    DMG_P[01,10]= -1; DMG_P[02,10]= -1; DMG_P[03,10]= -1; DMG_P[04,10]= -1; DMG_P[05,10]= -1; DMG_P[06,10]= -1; DMG_P[07,10]= -1; DMG_P[08,10]= -1; DMG_P[09,10]= -1; DMG_P[10,10]= -1; DMG_P[11,10]= -1; DMG_P[12,10]= -1; DMG_P[13,10]= -1; // 10. Covert_op
    DMG_P[01,11]= -1; DMG_P[02,11]= -1; DMG_P[03,11]= -1; DMG_P[04,11]= -1; DMG_P[05,11]=105; DMG_P[06,11]=105; DMG_P[07,11]= 85; DMG_P[08,11]=105; DMG_P[09,11]=105; DMG_P[10,11]=105; DMG_P[11,11]= 35; DMG_P[12,11]=105; DMG_P[13,11]= 15; // 11. H_tank
    DMG_P[01,12]= 90; DMG_P[02,12]= 85; DMG_P[03,12]= 90; DMG_P[04,12]= 85; DMG_P[05,12]= 80; DMG_P[06,12]= 70; DMG_P[07,12]= 60; DMG_P[08,12]= 75; DMG_P[09,12]= 65; DMG_P[10,12]= 80; DMG_P[11,12]= 30; DMG_P[12,12]= 80; DMG_P[13,12]= 10; // 12. Rocket
    DMG_P[01,13]=500; DMG_P[02,13]=500; DMG_P[03,13]=500; DMG_P[04,13]=500; DMG_P[05,13]=340; DMG_P[06,13]=300; DMG_P[07,13]=220; DMG_P[08,13]=300; DMG_P[09,13]=300; DMG_P[10,13]=340; DMG_P[11,13]= 85; DMG_P[12,13]=340; DMG_P[13,13]= 35; // 13. Lancruiser
    
//Secondary

//  01. L_Inf         02. H_Inf         03. L.Gun         04. Officer       05. Recon         06. APC           07. L_Tank        08. Artillery     09. Anti-air      10. Covert_Op     11. H_Tank        12. Rocket        13. Land_Cruiser / X by Y
    DMG_S[01,01]= 55; DMG_S[02,01]= 45; DMG_S[03,01]= 55; DMG_S[04,01]= 45; DMG_S[05,01]= 12; DMG_S[06,01]= 14; DMG_S[07,01]=  5; DMG_S[08,01]= 10; DMG_S[09,01]=  3; DMG_S[10,01]= 12; DMG_S[11,01]=  1; DMG_S[12,01]= 20; DMG_S[13,01]=  0; // 01. L_Inf      
    DMG_S[01,02]= 65; DMG_S[02,02]= 55; DMG_S[03,02]= 65; DMG_S[04,02]= 55; DMG_S[05,02]= 18; DMG_S[06,02]= 20; DMG_S[07,02]=  8; DMG_S[08,02]= 15; DMG_S[09,02]=  5; DMG_S[10,02]= 18; DMG_S[11,02]=  1; DMG_S[12,02]= 35; DMG_S[13,02]=  0; // 02. H_Inf    
    DMG_S[01,03]= -1; DMG_S[02,03]= -1; DMG_S[03,03]= -1; DMG_S[04,03]= -1; DMG_S[05,03]= -1; DMG_S[06,03]= 14; DMG_S[07,03]= -1; DMG_S[08,03]= -1; DMG_S[09,03]= -1; DMG_S[10,03]= -1; DMG_S[11,03]= -1; DMG_S[12,03]= -1; DMG_S[13,03]= -1; // 03. L.Gun  
    DMG_S[01,04]= 65; DMG_S[02,04]= 55; DMG_S[03,04]= 65; DMG_S[04,04]= 55; DMG_S[05,04]= 18; DMG_S[06,04]= 20; DMG_S[07,04]=  8; DMG_S[08,04]= 15; DMG_S[09,04]=  5; DMG_S[10,04]= 18; DMG_S[11,04]=  1; DMG_S[12,04]= 35; DMG_S[13,04]=  0; // 04. Officer 
    DMG_S[01,05]= 75; DMG_S[02,05]= 65; DMG_S[03,05]= 75; DMG_S[04,05]= 65; DMG_S[05,05]= 35; DMG_S[06,05]= 45; DMG_S[07,05]=  8; DMG_S[08,05]= 45; DMG_S[09,05]=  8; DMG_S[10,05]= 35; DMG_S[11,05]=  1; DMG_S[12,05]= 55; DMG_S[13,05]=  0; // 05. Recon
    DMG_S[01,06]= 65; DMG_S[02,06]= 55; DMG_S[03,06]= 65; DMG_S[04,06]= 55; DMG_S[05,06]= 18; DMG_S[06,06]= 14; DMG_S[07,06]=  8; DMG_S[08,06]= 15; DMG_S[09,06]=  5; DMG_S[10,06]= 18; DMG_S[11,06]=  1; DMG_S[12,06]= 35; DMG_S[13,06]=  0; // 06. APC
    DMG_S[01,07]= 75; DMG_S[02,07]= 70; DMG_S[03,07]= 75; DMG_S[04,07]= 70; DMG_S[05,07]= 40; DMG_S[06,07]= 20; DMG_S[07,07]=  8; DMG_S[08,07]= 45; DMG_S[09,07]=  8; DMG_S[10,07]= 40; DMG_S[11,07]=  1; DMG_S[12,07]= 55; DMG_S[13,07]=  0; // 07. L_Tank
    DMG_S[01,08]= -1; DMG_S[02,08]= -1; DMG_S[03,08]= -1; DMG_S[04,08]= -1; DMG_S[05,08]= -1; DMG_S[06,08]= -1; DMG_S[07,08]= -1; DMG_S[08,08]= -1; DMG_S[09,08]= -1; DMG_S[10,08]= -1; DMG_S[11,08]= -1; DMG_S[12,08]= -1; DMG_S[13,08]= -1; // 08. Artillery
    DMG_S[01,09]= -1; DMG_S[02,09]= -1; DMG_S[03,09]= -1; DMG_S[04,09]= -1; DMG_S[05,09]= -1; DMG_S[06,09]= -1; DMG_S[07,09]= -1; DMG_S[08,09]= -1; DMG_S[09,09]= -1; DMG_S[10,09]= -1; DMG_S[11,09]= -1; DMG_S[12,09]= -1; DMG_S[13,09]= -1; // 09. Anti-Air
    DMG_S[01,10]= 75; DMG_S[02,10]= 65; DMG_S[03,10]= 75; DMG_S[04,10]= 65; DMG_S[05,10]= 35; DMG_S[06,10]= 45; DMG_S[07,10]=  8; DMG_S[08,10]= 45; DMG_S[09,10]=  8; DMG_S[10,10]= 35; DMG_S[11,10]=  1; DMG_S[12,10]= 55; DMG_S[13,10]=  0; // 10. Covert_op
    DMG_S[01,11]=105; DMG_S[02,11]= 95; DMG_S[03,11]=105; DMG_S[04,11]= 95; DMG_S[05,11]= 45; DMG_S[06,11]= 45; DMG_S[07,11]= 10; DMG_S[08,11]= 45; DMG_S[09,11]= 10; DMG_S[10,11]= 45; DMG_S[11,11]=  1; DMG_S[12,11]= 65; DMG_S[13,11]=  0; // 11. H_tank
    DMG_S[01,12]= -1; DMG_S[02,12]= -1; DMG_S[03,12]= -1; DMG_S[04,12]= -1; DMG_S[05,12]= -1; DMG_S[06,12]= -1; DMG_S[07,12]= -1; DMG_S[08,12]= -1; DMG_S[09,12]= -1; DMG_S[10,12]= -1; DMG_S[11,12]= -1; DMG_S[12,12]= -1; DMG_S[13,12]= -1; // 12. Rocket
    DMG_S[01,13]=500; DMG_S[02,13]=500; DMG_S[03,13]=500; DMG_S[04,13]=500; DMG_S[05,13]= 85; DMG_S[06,13]= 75; DMG_S[07,13]= 55; DMG_S[08,13]= 70; DMG_S[09,13]= 75; DMG_S[10,13]= 85; DMG_S[11,13]= 15; DMG_S[12,13]= 85; DMG_S[13,13]=  5; // 13. Lancruiser
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Unit Cost Array using unit index

global.cost[00] =     0 ; //unit Parent
global.cost[01] =  1000 ; // Light Infantry
global.cost[02] =  3000 ; // Heavy infantry
global.cost[03] =  3000 ; // Long Gun
global.cost[04] =  4000 ; // Officer
global.cost[05] =  4000 ; // Recon
global.cost[06] =  5000 ; // APC
global.cost[07] =  7000 ; // Light Tank 
global.cost[08] =  7000 ; // Artillery
global.cost[09] =  6000 ; //AA / IFV
global.cost[10] =  8000 ; //Covert Op
global.cost[11] = 15000 ; //Heavy Tank
global.cost[12] = 12000 ; //Rocket
global.cost[13] = 32000 ; //Land Cuiser

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///GLOBAL GAME OPTIONS

//Fog Of war
global.FoW_on = true;

//player COs
global.P1_CO = 0 ;
global.P2_CO = 0 ;
global.P3_CO = 0 ; 
global.P4_CO = 0 ;
//arry duplicate
global.CO_P[0] = 0 ;
global.CO_P[1] = 0 ;
global.CO_P[2] = 0 ;
global.CO_P[3] = 0 ; 
global.CO_P[4] = 0 ;

//player teams
global.P1_Team = 1;
global.P2_Team = 2;
global.P3_Team = 3;
global.P4_Team = 4;
// array duplicate
global.team_P[0] = 0;
global.Team_P[1] = 1;
global.Team_P[2] = 2;
global.Team_P[3] = 3;
global.Team_P[4] = 4;

//CPU player
global.isAIplayer[1] = false;
global.isAIplayer[2] = false;
global.isAIplayer[3] = false;
global.isAIplayer[4] = false;

//assigned player who is playing at this computer in networked play, 0 means normal hot seat, -4 or nooone as spectator or server controls, no game inputs
global.Local_Player = 0; 

//observable players - either player at local game or for AI controll debug
//should be automated eventually
global.observe_P[0] = false; //neutral/non player always not observable
global.observe_P[1] = true;
global.observe_P[2] = true;
global.observe_P[3] = true;
global.observe_P[4] = true;

global.player_name[1] = "P1 closed";
global.player_name[2] = "P2 closed";
global.player_name[3] = "P3 closed";
global.player_name[4] = "P4 closed";

/*
global.P_View will replace the abouve
it will describe the obervablility of unit and terrain
vector 1 = acting player
vector 2 = observed unit/terrain owner
all true on default
to be adjusted on start of game
0 for neutral
*/
var pvi = 0;
var pvj = 0;

for ( pvi = 0 ; pvi &lt; 5; pvi++ ){
    for ( pvj = 0 ; pvj &lt; 5; pvj++ ){
        global.P_View[pvi,pvj] = false;
        } 
    }
//graphic controls
G_smooth = true;


//debug controls
global.alt_Disrupt = false; //disruptor is indirect fire
global.Disruptor_spread = false; // disruptor propigates throught target enemy unit radio

//indirect fire range assist during move
global.indirect_assist_on = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Global Network Variables
/*
net_mode
0 = No network
1 = Host
2 = Player Client
3 = spectator Client
4 = Server (match making and stores games...eventually)
*/

global.net_mode = 0;
//assign default server port
global.sPort = 15316;
//Server side sockets ( noone = -4 , GM:S defaults)
//coonects to 4 clients, becasue 4 players
global.sSocket[1] = noone ;
global.sSocket[2] = noone ;
global.sSocket[3] = noone ;
global.sSocket[4] = noone ;
//client side socket, only one needed?
global.cSocket = noone ; 
//list of clients
global.client_list = ds_list_create();




</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///testing stream BGM from externa file
test_bgm = audio_create_stream("bgm1.ogg");
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Temp- Mouse control tool tip on/off switch Var
global.Mouse_control_tool_tip_is_on = false;
global.Mouse_control_tool_tip_text = "left click and drag to move camera or unit"
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Unit and Terrain type Indexes
//used as reference for save and load

//Units
global.unit_type[ 0] = obj_unit ; //parent
global.unit_type[ 1] = obj_unit_LightInfantry;
global.unit_type[ 2] = obj_unit_HeavyInfantry;
global.unit_type[ 3] = obj_unit_LongGun;
global.unit_type[ 4] = obj_unit_Officer;
global.unit_type[ 5] = obj_unit_Recon;
global.unit_type[ 6] = obj_unit_APC;
global.unit_type[ 7] = obj_unit_LightTank
global.unit_type[ 8] = obj_unit_Artillery
global.unit_type[ 9] = obj_unit_AA;
global.unit_type[10] = obj_unit_CovertOp;
global.unit_type[11] = obj_unit_HeavyTank;
global.unit_type[12] = obj_unit_Rocket;
global.unit_type[13] = obj_unit_LandCruiser;

//Terrains
global.terrain_type[ 0] = obj_terrain_Sea; 
global.terrain_type[ 1] = obj_terrain_Plains;
global.terrain_type[ 2] = obj_terrain_Road;
global.terrain_type[ 3] = obj_terrain_Mountain;
global.terrain_type[ 4] = obj_terrain_Woods;
global.terrain_type[ 5] = obj_terrain_Bridge;

//special bridge types
global.terrain_type[50] = obj_terrain_SeaBridge;
global.terrain_type[56] = obj_terrain_RiverBridge;

global.terrain_type[ 6] = obj_terrain_River;
global.terrain_type[ 9] = obj_terrain; //parent
global.terrain_type[10] = obj_property; //parent
global.terrain_type[11] = obj_terrain_HQ;
global.terrain_type[12] = obj_terrain_Base;
global.terrain_type[13] = obj_terrain_City;
global.terrain_type[14] = obj_terrain_RadioTower;
global.terrain_type[15] = obj_terrain_CommandPost;

//COs
global.CO_type[ 0] = obj_CO_0 ; //parent
global.CO_type[ 1] = obj_CO_1 ; //Intel+
global.CO_type[ 2] = obj_CO_2 ; //HP+
global.CO_type[ 3] = obj_CO_3 ; //Radio+
global.CO_type[ 4] = obj_CO_4 ; //Direct+
global.CO_type[ 5] = obj_CO_5 ; //Infantry+
global.CO_type[ 6] = obj_CO_6 ; //range+
global.CO_type[ 7] = obj_CO_7 ; //Mov/atk+ (smoke)
global.CO_type[ 8] = obj_CO_8 ; //cost+
global.CO_type[ 9] = obj_CO_9 ; //Officer+
global.CO_type[10] = obj_CO_10; //anti-radio


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Networkign options and global variables

///Descript &amp; Global Vars

//keeps track of last network event and checks
global.last_network_event = "Waiting for input";

/*  
- Network mode -
0 = not network
1 = player host server
2 = player client client    
*/
global.network_mode = 0;

//empty server ip used from client side, defaults to same device
global.server_ip = "127.0.0.1";

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///blinking animator

if global.blinking {
    global.blinking = false;
    alarm[1] = 30;
    }
else {
    global.blinking = true;
    alarm[1] = 30;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Alarm 0 used to animate cursors

///animation controller
//this is a switch the check the cursors animation state and sets an alarm for the next frame frame delay (out of 60 fps) 

//Variable set up in create evemt

switch  (global.cursorFrame)    
    {
    case 1: global.cursorFrameIndex = 1;
            alarm[0] = 24;
            global.cursorFrame = 2;
            break;
            
    case 2: global.cursorFrameIndex = 2;
            alarm[0] = 4;
            global.cursorFrame = 3;
            break;
    
    case 3: global.cursorFrameIndex = 3;
            alarm[0] = 8;
            global.cursorFrame = 4;
            break;

    case 4: global.cursorFrameIndex = 2;
            alarm[0] = 2;
            global.cursorFrame = 5;
            break;
                
    case 5: global.cursorFrameIndex = 1;
            alarm[0] = 2;
            global.cursorFrame = 6;
            break;
            
    case 6: global.cursorFrameIndex = 0;
            alarm[0] = 2;
            global.cursorFrame = 1;
            break;        
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// COMMED OUT recieving saves and starting next turn
/*
//chek data type
if ds_map_find_value(async_load, "type") = network_type_data{
    //recive and lable buffer
    var b_incoming = ds_map_find_value(async_load, "buffer");
    
    //save buffer in app data
    if file_exists("recieved_turn.ubm")
    file_delete("recieved_turn.ubm");
    
    buffer_save(b_incoming,"recieved_turn.ubm");
    
    //switch network turning on
    global.network_turn_switch = true;
    
    //display size
    global.last_network_event = "recieved dile size: " + string(buffer_get_size(b_incoming));
    
    //auto start next turn
    room_goto(rm_continue);
    
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///incomming Data type 
/*
recieving a .snd        (sending  file)
saving it as a .rcv     (Recieved file)
execute net_Script in [scr] [name]
*/

//check incomming data type
if ds_map_find_value(async_load, "type") = network_type_data{
    global.last_network_event = "data recieved";
    //extract data buffer 
    var b_incoming = ds_map_find_value(async_load, "buffer");
    //replace exsistingfile with buffer in game data folder 
    //(C: Users &gt; [Name] &gt; AppData &gt; UberkriegPrototype3Live )
    var file_name = "incoming.rcv";
    if file_exists(file_name) file_delete(file_name);
    buffer_save(b_incoming,file_name);
    if file_exists(file_name) global.last_network_event = "ini file recieved";
    
    //get script name from ini file
    ini_open(file_name);
    var script_name = ini_read_string( "meta", "scr", "net_data_default");
    global.last_network_event = "found script : " + script_name;
    ini_close();
    
    //execute script with recieved file as argument
    //NOTE: Script names will not resolve as assets on the HTML5 target platform due to obfuscation of the final code, 
    //which may cause issues and should be taken into consideration when using the function. 
    var script_index = asset_get_index(script_name);
    script_execute( script_index , file_name );
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///destroy audio stream to prevent memory leak
audio_destroy_stream(test_bgm);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///debug draw room name

//draw_text(12,12,room_get_name(room));
//draw_text(24,24,string(instance_count));
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///debug: read and display global.Local_player

draw_text( 12 , 12 , "Local Player: " + string(global.Local_Player) );

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="123">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///toggle full screen!
window_set_fullscreen(!window_get_fullscreen());

if( window_get_fullscreen() )
    {
    texture_set_interpolation(true);
    G_smooth = true 
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="122">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///toggle res x1 &amp; x2

if (global.window_size = 1)
    {
    window_set_size( 768*2, 432*2 );
    global.window_size = 2;
    }   
else
    {  
    window_set_size( 768, 432 );
    global.window_size = 1
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_goto(rm_debugStart);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="121">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///set graphics imterpolate or no

if G_smooth 
    {
        
        G_smooth = false ;
        texture_set_interpolation(false);
    }

else
    {
    
        G_smooth = true ;
        texture_set_interpolation(true);
        
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
