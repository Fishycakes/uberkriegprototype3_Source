<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_basicCursor</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initiate
loop = 0;
//deactivate battle cursor
instance_deactivate_object(obj_battleCursor);


//depth
depth = UI_DEPTH_CURSOR;
//stop animation
image_speed = 0
//set position
global.posX = x div 24 ;
global.posY = y div 24 ;


//set alarm to Cursor move speed
alarm[1] = 0;
//view control speed - should be divisable by 24
view_speed = 8;
//view boarder to cursor
view_border = 4*24;

//set origin (for after curswor moves)
moveOriginX = global.posX ;
moveOriginY = global.posY ;

acting_unit = obj_map.units[moveOriginX,moveOriginY];

//change unit stat to "active"
obj_map.units[global.posX,global.posY].state = "active";
//change 
obj_map.units[global.posX,global.posY].depth = ACTIVE_UNIT;

with(obj_checker_tile){ sprite_index = -1;
       }
move_state_left=0;
scr_updateLocalMove(acting_unit);

//total path move cost variable used to trigger path re-calc
path_total = 0;

//set origin pathority

global.rangeCheck[global.posX,global.posY].pathority = 0; 









</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initiate alarm for cursor controls
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///animate
image_index = global.cursorFrameIndex

//set pos
global.posX = x div 24 ;
global.posY = y div 24 ;


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Navigation by arrow keys


//      check for key delay on press
if (    keyboard_check_pressed(vk_up   ) ||
        keyboard_check_pressed(vk_down ) ||
        keyboard_check_pressed(vk_left ) ||
        keyboard_check_pressed(vk_right) )
        {
        global.cursorKey_delay = global.cursorKey_startspeed ;
        with (obj_checker_tile) if pathority != (-1) scr_setPathGraphics_local(x div 24,y div 24);
        }
//      reset key delay on release
if (    keyboard_check_released(vk_up   ) ||
        keyboard_check_released(vk_down ) ||
        keyboard_check_released(vk_left ) ||
        keyboard_check_released(vk_right) )
        {
        alarm[1] = 0;
        global.cursorKey_delay = global.cursorKey_startspeed ;
        }
// arrow key actions and juice        
if (alarm[1] = -1 )
    {
    switch(keyboard_key)
        {
        case(vk_nokey):
            alarm[1] = 0;
            global.cursorkey_delay = global.cursorKey_startspeed ;
            break;
        
        case vk_up :
            if ( global.posY &gt; 0 ){ 
                y = y  - 24 ; 
                newpos_x = global.posX +0;
                newpos_y = global.posY -1;
                path_total += scr_check_move_cost(acting_unit,obj_map.terrains[newpos_x,newpos_y]);
                //add new checkertile to move order
                ds_priority_add(global.move_order,global.rangeCheck[newpos_x,newpos_y],global.rangeCheck[newpos_x,newpos_y].pathority);
                //if in move range, set new path node
                if (global.rangeCheck[newpos_x,newpos_y].move_cost != -1 ){
                    global.rangeCheck[newpos_x,newpos_y].pathority = path_total;
                    //scr_setPathGraphics_adj(newpos_x,newpos_y);
                    if( path_total &gt; acting_unit.move_points){
                        with(obj_checker_tile) pathority = -1;
                        //creat new path
                        scr_find_path( global.rangeCheck[newpos_x,newpos_y]);
                        }
                    }
                }
            //with (obj_checker_tile) if pathority != (-1) scr_setPathGraphics_local(x div 24,y div 24);    
            //draw_path
            scr_draw_path();
            scr_cursorKey_juice(1,global.cursorKey_sfx);
            break;
        
        case vk_down :
            if ( global.posY &lt; global.mapH - 1 ){
                y = y  + 24 ;
                newpos_x = global.posX +0;
                newpos_y = global.posY +1;
                path_total += scr_check_move_cost(acting_unit,obj_map.terrains[newpos_x,newpos_y]);
                //add new checkertile to move order
                ds_priority_add(global.move_order,global.rangeCheck[newpos_x,newpos_y],global.rangeCheck[newpos_x,newpos_y].pathority);
                //if in move range, set new path node
                if (global.rangeCheck[newpos_x,newpos_y].move_cost != -1 ){
                    global.rangeCheck[newpos_x,newpos_y].pathority = path_total;
                    //scr_setPathGraphics_adj(newpos_x,newpos_y);
                    if( path_total &gt; acting_unit.move_points){
                        with(obj_checker_tile) pathority = -1;
                        //creat new path
                        scr_find_path( global.rangeCheck[newpos_x,newpos_y]);
                        }
                    }
                }
            //with (obj_checker_tile) if pathority != (-1) scr_setPathGraphics_local(x div 24,y div 24);
            //draw_path
            scr_draw_path();
            scr_cursorKey_juice(1,global.cursorKey_sfx);
            break;

        
        case vk_left :
            if ( global.posX &gt; 0 ){
                x = x  - 24 ;
                newpos_x = global.posX -1;
                newpos_y = global.posY +0;
                path_total += scr_check_move_cost(acting_unit,obj_map.terrains[newpos_x,newpos_y]);
                //add new checkertile to move order
                ds_priority_add(global.move_order,global.rangeCheck[newpos_x,newpos_y],global.rangeCheck[newpos_x,newpos_y].pathority);
                //if in move range, set new path node
                if (global.rangeCheck[newpos_x,newpos_y].move_cost != -1 ){
                    global.rangeCheck[newpos_x,newpos_y].pathority = path_total;
                    //scr_setPathGraphics_adj(newpos_x,newpos_y);
                    if( path_total &gt; acting_unit.move_points){
                        with(obj_checker_tile) pathority = -1;
                        //creat new path
                        scr_find_path( global.rangeCheck[newpos_x,newpos_y]);
                        }
                    }
                }
            //with (obj_checker_tile) if pathority != (-1) scr_setPathGraphics_local(x div 24,y div 24);
            //draw_path
            scr_draw_path();
            scr_cursorKey_juice(1,global.cursorKey_sfx);
            break;
       
                    
        case vk_right :
            if ( global.posX &lt; global.mapW - 1 ){
                x = x  + 24 ;
                newpos_x = global.posX +1;
                newpos_y = global.posY +0;
                path_total += scr_check_move_cost(acting_unit,obj_map.terrains[newpos_x,newpos_y]);
                //add new checkertile to move order
                ds_priority_add(global.move_order,global.rangeCheck[newpos_x,newpos_y],global.rangeCheck[newpos_x,newpos_y].pathority);
                //if in move range, set new path node
                if (global.rangeCheck[newpos_x,newpos_y].move_cost != -1 ){
                    global.rangeCheck[newpos_x,newpos_y].pathority = path_total;
                    //scr_setPathGraphics_adj(newpos_x,newpos_y);
                    if( path_total &gt; acting_unit.move_points){
                        with(obj_checker_tile) pathority = -1;
                        //creat new path
                        scr_find_path( global.rangeCheck[newpos_x,newpos_y]);
                        }
                    }
                }
            //with (obj_checker_tile) if pathority != (-1) scr_setPathGraphics_local(x div 24,y div 24);
            //draw_path
            scr_draw_path();
            scr_cursorKey_juice(1,global.cursorKey_sfx);
            break;
            
          
    

        }
        
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// view control


// check for boarders and move 
if ( view_xview[0] &gt; x - view_border) view_xview[0] -= view_speed;

if ( view_xview[0] + view_wport[0] &lt; x + view_border + 24) view_xview[0] += view_speed;

if ( view_yview[0] &gt; y - view_border) view_yview[0] -= view_speed;

if ( view_yview[0] + view_hport[0] &lt; y + view_border+24) view_yview[0] += view_speed;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///press "B"

if  (keyboard_check_pressed(global.keyCANCEL))
    {
    scr_rangeCheck_reset();
    ds_priority_clear(global.move_order);
    
    obj_map.units[moveOriginX,moveOriginY].state = "idle";
    scr_setUnitDepth(obj_map.units[moveOriginX,moveOriginY]);
    instance_activate_object(obj_battleCursor);
    instance_activate_object(obj_miniwin);
    instance_destroy();
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Manage move path


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///troubleshoot readout

draw_text(0,48,obj_map.units[moveOriginX,moveOriginY].state);

//draw_text(0,72,string(still_to_check));
draw_text(0,84,"Move:"+string(global.rangeCheck[global.posX,global.posY].move_cost));
draw_text(0,96,"Path:"+string(path_total));
draw_text(0,108,"Loop:"+string(loop));

if ( ds_priority_size(global.move_order) &gt;0){
temp_path_final = ds_priority_find_max(global.move_order);
draw_text(0,120, string(temp_path_final.pathority));
}

//print path
MOQ = ds_priority_create();
ds_priority_copy(MOQ,global.move_order);

while (MOQ &lt; 0){
    tempQ = ds_priority_delete_min(MOQ);
    MOQcol = ds_priority_size(MOQ);
    draw_text(0,120 +(12*MOQcol),string(tempQ.pathority)); 
    }
ds_priority_destroy(MOQ); 
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
