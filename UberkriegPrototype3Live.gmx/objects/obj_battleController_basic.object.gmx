<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-80000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///change mode to Basic Battle
global.mode = "Basic Battle";

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///creat &amp; load map
global.map = instance_create(0,0,obj_map);


if   ( file_exists ("protoland.ubm")) scr_ubermap_load("protoland.ubm");
else scr_ubermap_load("2P_SabreRanger_v3.ubm");
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///create global.rangeCheck (2D array)

for( i = 0 ; i &lt; global.mapW ; i += 1 )         // i is to X
    {
    for( j = 0 ; j &lt; global.mapH; j += 1 )      // j is to Y
        {        
        //add to array
        global.rangeCheck[i,j] = instance_create( i*24 , j*24 , obj_checker_tile ) ;
        //set sprite to none
        global.rangeCheck[i,j].sprite_index = -1;
        //set depth
        global.rangeCheck[i,j].depth = CHECK_LAYRE ; 
        }
    }
    
//
global.rangeCheckerFramIndex = 0;
    

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Unit upkeep Q

//this queue is for upkeep events
global.upkeep_q = ds_queue_create();

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create HUD objects: Cursor,miniwin

global.terrain_check = obj_map.terrains[1,1];
global.unit_check = obj_map.units[1,1];

//create &amp; deactivate Cursor
instance_create(24,24,obj_battleCursor);
instance_deactivate_object(obj_battleCursor);

//create &amp; deactivate miniwin
instance_create(24,24,obj_miniwin);
instance_deactivate_object(obj_miniwin);
instance_create(24,24,obj_topwin);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create player Q &amp; turning : set P1-Day1 VARs

//player Queue
global.player_q = ds_queue_create();
//create priority q to organize player order 
//to be destroyed once players are ordered 
global.temp_pq = ds_priority_create();
//debug variable, keeps track of number of HQs
global. HQnum = 0;

//Players in play
global.P1_in_play = false;
global.P2_in_play = false;
global.P3_in_play = false;
global.P4_in_play = false;


//switch player on if HQ exsist, save xy positions for starting vcursor and view positions
with (obj_terrain_HQ){

    switch (ownership){
        case 0 :
        break;
        
        case 1: // create player 1
        global.P1_in_play = true;
        //variable for cursor and view
        other.P1_x = x;
        other.P1_y = y;
        break;
        
        case 2: // create player 2
        global.P2_in_play = true;
        //variable for cursor and view
        other.P2_x = x;
        other.P2_y = y;
        break; 
        
        case 3: // create player 3
        global.P3_in_play = true;
        //variable for cursor and view
        other.P3_x = x;
        other.P3_y = y;
        break;
        
        case 4: // create player 4
        global.P4_in_play = true;
        //variable for cursor and view
        other.P4_x = x;
        other.P4_y = y;
        break;
    
        }
    }
    
//do same for units that are also commanders
with (obj_unit){
    if (isCommander){
        switch (ownership){
            case 0 :
            break;
            
            case 1: // create player 1
                if(global.P1_in_play = false){
                    global.P1_in_play = true;
                    //variable for cursor and view
                    other.P1_x = x;
                    other.P1_y = y;
                    }
                break;
            
            case 2: // create player 2
                if(global.P2_in_play = false){
                    global.P2_in_play = true;
                    //variable for cursor and view
                    other.P2_x = x;
                    other.P2_y = y;
                    }
                break; 
            
            case 3: // create player 3
                if(global.P3_in_play = false){
                    global.P3_in_play = true;
                    //variable for cursor and view
                    other.P3_x = x;
                    other.P3_y = y;
                    }
                break;
            
            case 4: // create player 4
                if(global.P4_in_play = false){
                    global.P4_in_play = true;
                    //variable for cursor and view
                    other.P4_x = x;
                    other.P4_y = y;
                    }
                break;
        
            }
        }
    }


 
    
//initiate player objects and place them in Q (hard code teams here)
//P1
if (global.P1_in_play){
        global.HQnum +=1;
        global.P1 = instance_create(0,0,obj_player);
        global.P[1] = global.P1; 
        global.P1.number = 1;
        global.P1.name = "COOKIELAND";
        ds_priority_add(global.temp_pq, global.P1 ,1);
        //create CO 
        global.P1.CO = instance_create(0,0, asset_get_index( "obj_CO_"+ string(global.P1_CO)));
        global.P1.CO.ownership = 1;
        //global.P1_in_play = true;
        //assign team
        global.P1.team = global.P1_Team
        //add cursor pose at 
        global.P1.save_cursor_pos_x = P1_x;
        global.P1.save_cursor_pos_y =P1_y;
        //check view
        global.P1.save_view_pos_x = view_xview[0];
        global.P1.save_view_pos_y = view_yview[0];
        if global.canScroll_x if (P1_x &gt; (768-96)) global.P1.save_view_pos_x = P1_x - (768-24*5);
        if global.canScroll_y if (P1_y &gt; (432-96)) global.P1.save_view_pos_y = P1_y - (432-24*5);
        //set unit and property teams
        with (obj_property){
            if (ownership = 1) team = global.P1.team;             
            } 
       with (obj_unit){
            if (ownership = 1) team = global.P1.team;
        }
    }
//P2    
if (global.P2_in_play){
    global.HQnum +=1;
    global.P2 = instance_create(0,0,obj_player);
    global.P[2] = global.P2;
    global.P2.number = 2;
    global.P2.name = "PEPPERLAND";
    ds_priority_add(global.temp_pq, global.P2 ,2);
    //create CO 
    global.P2.CO = instance_create(0,0, asset_get_index( "obj_CO_"+ string(global.P2_CO)));
    global.P2.CO.ownership = 2;
    //global.P2_in_play = true;
    //assign team
    global.P2.team = global.P2_Team;
    //add cursor pose at 
    global.P2.save_cursor_pos_x = P2_x;
    global.P2.save_cursor_pos_y = P2_y;
    //check view
    global.P2.save_view_pos_x = view_xview[0];
    global.P2.save_view_pos_y = view_yview[0];
    if global.canScroll_x if (P2_x &gt; (768-96)) global.P2.save_view_pos_x = P2_x - (768-24*5);
    if global.canScroll_y if (P2_y &gt; (432-96)) global.P2.save_view_pos_y = P2_y - (432-24*5);
    //set unit and property teams
    with (obj_property){
        if (ownership = 2) team = global.P2.team;             
        }
    with (obj_unit){
        if (ownership = 2) team = global.P2.team;             
        } 
    }
//P3
if(global.P3_in_play){
    global.HQnum +=1;
    global.P3 = instance_create(0,0,obj_player);
    global.P[3] = global.P3;
    global.P3.number = 3;
    global.P3.name = "MARMALADELAND";
    ds_priority_add(global.temp_pq, global.P3 ,3);
    //create CO 
    global.P3.CO = instance_create(0,0, asset_get_index( "obj_CO_"+ string(global.P3_CO)));
    global.P3.CO.ownership = 3;
    //global.P3_in_play = true;
    //assign team
    global.P3.team = global.P3_Team;
    //add cursor pose at
    global.P3.save_view_pos_x = view_xview[0];
    global.P3.save_view_pos_y = view_yview[0]; 
    global.P3.save_cursor_pos_x = P3_x;
    global.P3.save_cursor_pos_y = P3_y;
    //check view
    if global.canScroll_x if (P3_x &gt; (768-96)) global.P3.save_view_pos_x = P3_x - (768-24*5);
    if global.canScroll_y if (P3_y &gt; (432-96)) global.P3.save_view_pos_y = P3_y - (432-24*5);
    with (obj_property){
        if (ownership = 3) team = global.P3.team;             
        }
    with (obj_unit){
        if (ownership = 3) team = global.P3.team;             
        }  
    }
//P4
if (global.P4_in_play){
    global.HQnum +=1;
    global.P4 = instance_create(0,0,obj_player);
    global.P[4] = global.P4;
    global.P4.number = 4;
    global.P4.name = "PRETZELLAND";  
    ds_priority_add(global.temp_pq, global.P4 ,4);
    //create CO 
    global.P4.CO = instance_create(0,0, asset_get_index( "obj_CO_"+ string(global.P4_CO)));
    global.P4.CO.ownership = 4;
    //global.P4_in_play = true;
    //assign team
    global.P4.team = global.P4_Team;
    //add cursor pose at
    global.P4.save_view_pos_x = view_xview[0];
    global.P4.save_view_pos_y = view_yview[0]; 
    global.P4.save_cursor_pos_x = P4_x;
    global.P4.save_cursor_pos_y = P4_y;
    //check view
    if global.canScroll_x if (P4_x &gt; (768-96)) global.P4.save_view_pos_x = P4_x - (768-24*5);
    if global.canScroll_y if (P4_y &gt; (432-96)) global.P4.save_view_pos_y = P4_y - (432-24*5);
    with (obj_property){
        if (ownership = 4) team = global.P4.team;             
        }
    with (obj_unit){
        if (ownership = 4) team = global.P4.team;             
        }   
    
    }
    
//find last player: used to detect day change
global.last_player = ds_priority_find_max(global.temp_pq).number;

    
//convert priority Q to regular Q
i = 0;
for( i=0 ; i&lt; global.HQnum ; i+=1){
    p_priority = ds_priority_delete_min(global.temp_pq);
    ds_queue_enqueue(global.player_q,p_priority);
    }
//delete temp priority Q
ds_priority_destroy(global.temp_pq);    

///CRITICAL TURNING VARIABLS !!!
//turn phaze
global.Phaze = "starting" //  starting -&gt; upkeep -&gt; main -&gt; end
//player turn, returns player object
global.P_Turn = ds_queue_head(global.player_q);
//global Day
global.Day = 1;

//create turn change object set to start in waiting state
 instance_create(0,0,obj_starting);
 obj_starting.state = "waiting";
 
//radio boarder for first player 
scr_globalRadioCheck();
scr_update_radioBoarder();
scr_rangeCheck_reset();
 
//vision reset and update for first player
scr_globalVisionReset();
scr_updateGlobalVision();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///check if unit HP is hidden

with (obj_CO_0)
    {
    if (COFX_HiddenHP )
        {
        with (obj_unit)
            {
            if (ownership = other.ownership) HP_hidden = true ;
            }
        }
    }
    
    
    

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Unit control variables

//clear after each order
global.acting_unit  = 0;
global.target_unit = 0;

//create list for multiple possible target unit selections ( ie for enage, disrupt, ect.)
global.targetables = ds_list_create();

global.origin = -1;
global.destination = -1;
 
global.move_order   = ds_priority_create();
global.acting_unit_moved = true;
global.action_order = "wait" ;//default to wait



//actionable commands switches to populate command Menu

global.capture      = false;
global.engage       = false;
global.join         = false;
global.attach       = false;
global.supply       = false;
global.load         = false;
global.drop_A       = false;
global.drop_B       = false;
global.infiltrate   = false; 
global.hide         = false;
global.appear       = false;
global.disrupt      = false;
global.wait         = false;

//special CO commands

global.smoke        = false;

// extra command variables
global.engage_type  = 1; //default to primary
global.drop_phaze_2 = false; //true if second drop action is taking place to bypass move in execute order event

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Damage charts

//Damage chart moved to Master Controller ( this version is no longer up to date

/*
//Primary [defender,attacker]

//  01. L_Inf         02. H_Inf         03. L.Gun         04. Officer       05. Recon         06. APC           07. L_Tank        08. Artillery     09. Anti-air      10. Covert_Op     11. H_Tank        12. Rocket        13. Land_Cruiser / X by Y
    DMG_P[01,01]= -1; DMG_P[02,01]= -1; DMG_P[03,01]= -1; DMG_P[04,01]= -1; DMG_P[05,01]= -1; DMG_P[06,01]= -1; DMG_P[07,01]= -1; DMG_P[08,01]= -1; DMG_P[09,01]= -1; DMG_P[10,01]= -1; DMG_P[11,01]= -1; DMG_P[12,01]= -1; DMG_P[13,01]= -1; // 01. L_Inf      
    DMG_P[01,02]= -1; DMG_P[02,02]= -1; DMG_P[03,02]= -1; DMG_P[04,02]= -1; DMG_P[05,02]= 85; DMG_P[06,02]= 75; DMG_P[07,02]= 55; DMG_P[08,02]= 75; DMG_P[09,02]= 55; DMG_P[10,02]= 85; DMG_P[11,02]= 15; DMG_P[12,02]= 85; DMG_P[13,02]=  5; // 02. H_Inf    
    DMG_P[01,03]= 55; DMG_P[02,03]= 45; DMG_P[03,03]= 55; DMG_P[04,03]= 45; DMG_P[05,03]= 25; DMG_P[06,03]= 25; DMG_P[07,03]= 15; DMG_P[08,03]= 25; DMG_P[09,03]= 15; DMG_P[10,03]= 25; DMG_P[11,03]=  5; DMG_P[12,03]= 25; DMG_P[13,03]=  3; // 03. L.Gun  
    DMG_P[01,04]= -1; DMG_P[02,04]= -1; DMG_P[03,04]= -1; DMG_P[04,04]= -1; DMG_P[05,04]= -1; DMG_P[06,04]= -1; DMG_P[07,04]= -1; DMG_P[08,04]= -1; DMG_P[09,04]= -1; DMG_P[10,04]= -1; DMG_P[11,04]= -1; DMG_P[12,04]= -1; DMG_P[13,04]= -1; // 04. Officer 
    DMG_P[01,05]= -1; DMG_P[02,05]= -1; DMG_P[03,05]= -1; DMG_P[04,05]= -1; DMG_P[05,05]= -1; DMG_P[06,05]= -1; DMG_P[07,05]= -1; DMG_P[08,05]= -1; DMG_P[09,05]= -1; DMG_P[10,05]= -1; DMG_P[11,05]= -1; DMG_P[12,05]= -1; DMG_P[13,05]= -1; // 05. Recon
    DMG_P[01,06]= -1; DMG_P[02,06]= -1; DMG_P[03,06]= -1; DMG_P[04,06]= -1; DMG_P[05,06]= -1; DMG_P[06,06]= -1; DMG_P[07,06]= -1; DMG_P[08,06]= -1; DMG_P[09,06]= -1; DMG_P[10,06]= -1; DMG_P[11,06]= -1; DMG_P[12,06]= -1; DMG_P[13,06]= -1; // 06. APC
    DMG_P[01,07]= -1; DMG_P[02,07]= -1; DMG_P[03,07]= -1; DMG_P[04,07]= -1; DMG_P[05,07]= 85; DMG_P[06,07]= 75; DMG_P[07,07]= 55; DMG_P[08,07]= 70; DMG_P[09,07]= 75; DMG_P[10,07]= 85; DMG_P[11,07]= 15; DMG_P[12,07]= 85; DMG_P[13,07]=  5; // 07. L_Tank
    DMG_P[01,08]= 90; DMG_P[02,08]= 85; DMG_P[03,08]= 90; DMG_P[04,08]= 85; DMG_P[05,08]= 80; DMG_P[06,08]= 70; DMG_P[07,08]= 60; DMG_P[08,08]= 75; DMG_P[09,08]= 65; DMG_P[10,08]= 80; DMG_P[11,08]= 25; DMG_P[12,08]= 80; DMG_P[13,08]= 10; // 08. Artillery
    DMG_P[01,09]=105; DMG_P[02,09]=105; DMG_P[03,09]=105; DMG_P[04,09]=105; DMG_P[05,09]= 60; DMG_P[06,09]= 50; DMG_P[07,09]= 15; DMG_P[08,09]= 50; DMG_P[09,09]= 45; DMG_P[10,09]= 60; DMG_P[11,09]=  5; DMG_P[12,09]= 55; DMG_P[13,09]=  1; // 09. Anti-Air
    DMG_P[01,10]= -1; DMG_P[02,10]= -1; DMG_P[03,10]= -1; DMG_P[04,10]= -1; DMG_P[05,10]= -1; DMG_P[06,10]= -1; DMG_P[07,10]= -1; DMG_P[08,10]= -1; DMG_P[09,10]= -1; DMG_P[10,10]= -1; DMG_P[11,10]= -1; DMG_P[12,10]= -1; DMG_P[13,10]= -1; // 10. Covert_op
    DMG_P[01,11]= -1; DMG_P[02,11]= -1; DMG_P[03,11]= -1; DMG_P[04,11]= -1; DMG_P[05,11]= 90; DMG_P[06,11]= 90; DMG_P[07,11]= 70; DMG_P[08,11]= 85; DMG_P[09,11]= 90; DMG_P[10,11]= 95; DMG_P[11,11]= 35; DMG_P[12,11]= 95; DMG_P[13,11]= 15; // 11. H_tank
    DMG_P[01,12]= 90; DMG_P[02,12]= 85; DMG_P[03,12]= 90; DMG_P[04,12]= 85; DMG_P[05,12]= 80; DMG_P[06,12]= 70; DMG_P[07,12]= 60; DMG_P[08,12]= 75; DMG_P[09,12]= 65; DMG_P[10,12]= 80; DMG_P[11,12]= 25; DMG_P[12,12]= 80; DMG_P[13,12]= 10; // 12. Rocket
    DMG_P[01,13]=500; DMG_P[02,13]=500; DMG_P[03,13]=500; DMG_P[04,13]=500; DMG_P[05,13]=340; DMG_P[06,13]=300; DMG_P[07,13]=220; DMG_P[08,13]=300; DMG_P[09,13]=300; DMG_P[10,13]=340; DMG_P[11,13]= 95; DMG_P[12,13]=340; DMG_P[13,13]= 35; // 13. Lancruiser
    
//Secondary

//  01. L_Inf         02. H_Inf         03. L.Gun         04. Officer       05. Recon         06. APC           07. L_Tank        08. Artillery     09. Anti-air      10. Covert_Op     11. H_Tank        12. Rocket        13. Land_Cruiser / X by Y
    DMG_S[01,01]= 55; DMG_S[02,01]= 45; DMG_S[03,01]= 55; DMG_S[04,01]= 45; DMG_S[05,01]= 12; DMG_S[06,01]= 14; DMG_S[07,01]=  5; DMG_S[08,01]= 10; DMG_S[09,01]=  3; DMG_S[10,01]= 12; DMG_S[11,01]=  1; DMG_S[12,01]= 20; DMG_S[13,01]=  0; // 01. L_Inf      
    DMG_S[01,02]= 65; DMG_S[02,02]= 55; DMG_S[03,02]= 65; DMG_S[04,02]= 55; DMG_S[05,02]= 18; DMG_S[06,02]= 20; DMG_S[07,02]=  8; DMG_S[08,02]= 15; DMG_S[09,02]=  5; DMG_S[10,02]= 18; DMG_S[11,02]=  1; DMG_S[12,02]= 35; DMG_S[13,02]=  0; // 02. H_Inf    
    DMG_S[01,03]= -1; DMG_S[02,03]= -1; DMG_S[03,03]= -1; DMG_S[04,03]= -1; DMG_S[05,03]= -1; DMG_S[06,03]= -1; DMG_S[07,03]= -1; DMG_S[08,03]= -1; DMG_S[09,03]= -1; DMG_S[10,03]= -1; DMG_S[11,03]= -1; DMG_S[12,03]= -1; DMG_S[13,03]= -1; // 03. L.Gun  
    DMG_S[01,04]= 75; DMG_S[02,04]= 65; DMG_S[03,04]= 75; DMG_S[04,04]= 65; DMG_S[05,04]= 35; DMG_S[06,04]= 45; DMG_S[07,04]=  8; DMG_S[08,04]= 45; DMG_S[09,04]=  8; DMG_S[10,04]= 35; DMG_S[11,04]=  1; DMG_S[12,04]= 55; DMG_S[13,04]=  0; // 04. Officer 
    DMG_S[01,05]= 75; DMG_S[02,05]= 65; DMG_S[03,05]= 75; DMG_S[04,05]= 65; DMG_S[05,05]= 35; DMG_S[06,05]= 45; DMG_S[07,05]=  8; DMG_S[08,05]= 45; DMG_S[09,05]=  8; DMG_S[10,05]= 35; DMG_S[11,05]=  1; DMG_S[12,05]= 55; DMG_S[13,05]=  0; // 05. Recon
    DMG_S[01,06]= -1; DMG_S[02,06]= -1; DMG_S[03,06]= -1; DMG_S[04,06]= -1; DMG_S[05,06]= -1; DMG_S[06,06]= -1; DMG_S[07,06]= -1; DMG_S[08,06]= -1; DMG_S[09,06]= -1; DMG_S[10,06]= -1; DMG_S[11,06]= -1; DMG_S[12,06]= -1; DMG_S[13,06]= -1; // 06. APC
    DMG_S[01,07]= 75; DMG_S[02,07]= 70; DMG_S[03,07]= 75; DMG_S[04,07]= 70; DMG_S[05,07]= 40; DMG_S[06,07]= 45; DMG_S[07,07]= -1; DMG_S[08,07]= 45; DMG_S[09,07]=  8; DMG_S[10,07]= 40; DMG_S[11,07]=  1; DMG_S[12,07]= 55; DMG_S[13,07]=  0; // 07. L_Tank
    DMG_S[01,08]= -1; DMG_S[02,08]= -1; DMG_S[03,08]= -1; DMG_S[04,08]= -1; DMG_S[05,08]= -1; DMG_S[06,08]= -1; DMG_S[07,08]= -1; DMG_S[08,08]= -1; DMG_S[09,08]= -1; DMG_S[10,08]= -1; DMG_S[11,08]= -1; DMG_S[12,08]= -1; DMG_S[13,08]= -1; // 08. Artillery
    DMG_S[01,09]= -1; DMG_S[02,09]= -1; DMG_S[03,09]= -1; DMG_S[04,09]= -1; DMG_S[05,09]= -1; DMG_S[06,09]= -1; DMG_S[07,09]= -1; DMG_S[08,09]= -1; DMG_S[09,09]= -1; DMG_S[10,09]= -1; DMG_S[11,09]= -1; DMG_S[12,09]= -1; DMG_S[13,09]= -1; // 09. Anti-Air
    DMG_S[01,10]= 75; DMG_S[02,10]= 65; DMG_S[03,10]= 75; DMG_S[04,10]= 65; DMG_S[05,10]= 35; DMG_S[06,10]= 45; DMG_S[07,10]=  8; DMG_S[08,10]= 45; DMG_S[09,10]=  8; DMG_S[10,10]= 35; DMG_S[11,10]=  1; DMG_S[12,10]= 55; DMG_S[13,10]=  0; // 10. Covert_op
    DMG_S[01,11]=105; DMG_S[02,11]= 95; DMG_S[03,11]=105; DMG_S[04,11]= 95; DMG_S[05,11]= 45; DMG_S[06,11]= 45; DMG_S[07,11]= 10; DMG_S[08,11]= 45; DMG_S[09,11]= 10; DMG_S[10,11]= 45; DMG_S[11,11]=  2; DMG_S[12,11]= 65; DMG_S[13,11]=  0; // 11. H_tank
    DMG_S[01,12]= -1; DMG_S[02,12]= -1; DMG_S[03,12]= -1; DMG_S[04,12]= -1; DMG_S[05,12]= -1; DMG_S[06,12]= -1; DMG_S[07,12]= -1; DMG_S[08,12]= -1; DMG_S[09,12]= -1; DMG_S[10,12]= -1; DMG_S[11,12]= -1; DMG_S[12,12]= -1; DMG_S[13,12]=  0; // 12. Rocket
    DMG_S[01,13]=400; DMG_S[02,13]=400; DMG_S[03,13]=400; DMG_S[04,13]=400; DMG_S[05,13]= 85; DMG_S[06,13]= 75; DMG_S[07,13]= 55; DMG_S[08,13]= 70; DMG_S[09,13]= 75; DMG_S[10,13]= 85; DMG_S[11,13]= 25; DMG_S[12,13]= 85; DMG_S[13,13]=  5; // 13. Lancruiser
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initiate Variables
global.posX = 0;
global.posY = 0;
global.Phaze = "Waiting";  
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///debug counters

battleCurosrCount = 0 ;
moveCusorCount = 0 ;
battle_controller_count = 0;
roomCounter = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///add player COs to an indexed array *NEW*
if global.P1_in_play global.P[1] = global.P1;
if global.P2_in_play global.P[2] = global.P2;
if global.P3_in_play global.P[3] = global.P3;
if global.P4_in_play global.P[4] = global.P4;



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///CHECK BASIC INTEL DRAW POSITIONS

intel_pos[1] = 0;
intel_pos[2] = 0;
intel_pos[3] = 0;
intel_pos[4] = 0;

var pos_check = 1;

if global.P1_in_play 
    {
    intel_pos[pos_check] = global.P1;
    pos_check += 1;
    }
    
if global.P2_in_play 
    {
    intel_pos[pos_check] = global.P2;
    pos_check += 1;
    }
    
if global.P3_in_play 
    {
    intel_pos[pos_check] = global.P3;
    pos_check += 1;
    }
    
if global.P4_in_play 
    {
    intel_pos[pos_check] = global.P4;
    }
    
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///intel check and Chart on/off variable

minimap_check_on = false;
damage_chart_on = false;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///reset actionalbles
//reset actionable variables (just in case)
global.capture      = false;
global.engage       = false;
global.join         = false;
global.attach       = false;
global.supply       = false;
global.load         = false;
global.drop_A       = false;
global.drop_B       = false;
global.infiltrate   = false; 
global.hide         = false;
global.appear       = false;
global.disrupt      = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///animate checker times
global.rangeCheckerFramIndex +=1;
if (global.rangeCheckerFramIndex &gt; 121 ) global.rangeCheckerFramIndex =  0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// debug, count move cursors

temp_move_count = 0;

with( obj_moveCursor ) other.temp_move_count +=1;


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Basic Intel Check (mini map)

if keyboard_check_pressed(ord("V"))
    {
    //draw intel is on
    minimap_check_on = true;
    //Update battle strength, unit count, and property count
    //this is a temeprary solution and should be streamlined alog with other parts of the UI s it gets more robust
    
    //clear for recount
    with obj_player
        {
        battle_strength  = 0;
        unit_count      = 0;
        property_count  = 0;
        }
    //unit count and battle strength
    with obj_unit
        {
        switch ownership
            {
        
            case 1:
                global.P1.unit_count       += 1;
                global.P1.battle_strength   += (global.cost[unit_index] div 10)*hp;
                break;
            case 2:
                global.P2.unit_count       += 1;
                global.P2.battle_strength   += (global.cost[unit_index] div 10)*hp;
                break;
            case 3:
                global.P3.unit_count       += 1;
                global.P3.battle_strength   += (global.cost[unit_index] div 10)*hp;
                break;
            case 4:
                global.P4.unit_count       += 1;
                global.P4.battle_strength   += (global.cost[unit_index] div 10)*hp;
                break;
            }
        }
    with obj_property if(income &gt; 0 and ownership !=0)
        {
        switch ownership
            {   
            case 1:
                global.P1.property_count +=1;
                break;
            case 2:
                global.P2.property_count +=1;
                break;
            case 3:
                global.P3.property_count +=1;
                break;
            case 4:
                global.P4.property_count +=1;
                break;
            }
        
        } 
    }
if keyboard_check_released(ord("V"))
    {
    minimap_check_on = false;
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Press "A" for Damage Chart

if keyboard_check_pressed(ord("A")) damage_chart_on = true;
if keyboard_check_released(ord("A")) damage_chart_on = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Debug



//draw_text(12,12,"MOVE CURSOR COUNT: " + string(temp_move_count));

//Scal GUI
display_set_gui_size(768, 432);

//Player Phaze
if (global.Phaze = "Waiting"){   

    draw_sprite(spr_factionIcon_square, global.P_Turn.number-1,12,24)
    
    draw_text(36,32, "DAY: " + string(global.Day));
    
    draw_text(12,48, "P" + string(global.P_Turn.name) + ": Press CONFIRM [Z] to start turn" );
    
    draw_text(12,84, "CONTROLS:" );
    draw_text(12,84+16, "Z - Confirm" );
    draw_text(12,84+16*2, "X - Cancel" );
    draw_text(12,84+16*3, "C - unit/terrain info (not up to date)");
    draw_text(12,84+16*4, "SPACE - Radio Checks");
    
    draw_text(12,84+16*6, "A - Damage Chart" );
    draw_text(12,84+16*7, "V - Minimap &amp; Player intel" );
    
    
    
    
    }

/*

battleCurosrCount =0;        
with obj_battleCursor other.battleCurosrCount+=1;
draw_text(12,84+16*5, "Battle Cursor Count : " +string(string(battleCurosrCount)));

moveCusorCount = 0;
with (obj_moveCursor or obj_moveCursorMouse) other.moveCusorCount+=1;
draw_text(12,84+16*6, "Move Cursor Count : " +string(string(moveCusorCount)));

battle_controller_count =0;
with obj_moveCursor other.moveCusorCount+=1;
draw_text(12,84+16*6, "Move Cursor Count : " +string(string(moveCusorCount)));

battle_controller_count= 0;
with obj_battleController_basic other.battle_controller_count+=1;
draw_text(12,84+16*7, "Battle Controller Count : " +string(string(battle_controller_count)));


roomCounter = 0;
with obj_UI_deploy_mouse other.roomCounter+=1;
draw_text(12,84+16*8, "Deploy win : " +string(string(roomCounter)));

draw_text(12,84+16*10, "X : " +string(string(global.posX)));
draw_text(12,84+16*11, "X : " +string(string(global.posY)));




/*
if (global.Phaze = "Main"){      
                                //Player umber
                                draw_text(12,24, "PLAYER " + string(global.P_Turn.number ));
                                //Funds
                                draw_text(12,36, "FUNDS: " + string(global.P_Turn.funds ));
                                //Income
                                draw_text(12,48,"INCOME: " + string(global.P_Turn.revenue));
                                //Unit Stats
                                draw_text(12,60, "UNITS: " + string(global.P_Turn.unit_count) +"/"+ string(global.P_Turn.battle_strength));
                                }




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw intel and minimap check
if ( minimap_check_on and global.Phaze = "Main" )
    {
    draw_set_colour(global.c_uiBaseGrey );
    draw_rectangle(view_xview,view_yview,view_xview+768,view_yview+432,0);
    draw_set_color(make_color_rgb(235,218,206));
    
    
    //drawn intel
    
    var i = 1;
    
    for ( i=1 ; i&lt;5 ; i++)
        {
        if ( intel_pos[i] !=0 )
            {
            //draw base image
            draw_sprite(spr_intel_base,intel_pos[i].number-1, view_xview+24-6, view_yview+16+104*(i-1));
            //draw CO name, temp 'till CO prtraits are avaliable
            draw_text(view_xview+16+16-5-6, view_yview+16+25-12+104*(i-1),string(intel_pos[i].CO.name));
            
            //chech for infiltrate 
            if ( global.P_Turn.intel_P[intel_pos[i].number] or global.P_Turn.CO.COFX_PerfectIntel or global.P_Turn.team = intel_pos[i].team)
                {
                //funds
                scr_draw_num(spr_num_light,true,intel_pos[i].funds, view_xview+114-6,view_yview+39+104*(i-1),8);
                //battle strength
                scr_draw_num(spr_num_light,true,intel_pos[i].battle_strength, view_xview+114-6,view_yview+61+104*(i-1),8);
                //stars
                scr_draw_stars(view_xview+276 -6 -(intel_pos[i].CO.COP_Bar*7+intel_pos[i].CO.SCOP_Bar*13),view_yview+84+104*(i-1),intel_pos[i].CO.COP_Bar,intel_pos[i].CO.SCOP_Bar,intel_pos[i].CO.charge);
                //unit count
                scr_draw_num(spr_num_light,true,intel_pos[i].unit_count, view_xview+324-6,view_yview+39+104*(i-1),2);
                //property count
                scr_draw_num(spr_num_light,true,intel_pos[i].property_count, view_xview+324-6,view_yview+85+104*(i-1),2);
                }
            }
        }
        
    //Draw Minimap****************************************************
    
    //set strting pos
    var startx  =   view_xview+343+6-1 + ( (400-global.mapW*8) div 2  )  ;
    var starty  =    view_yview+16 + ( (400-global.mapH*8) div 2  )  ;
    //draw outline
    draw_rectangle_colour(view_xview+343+6, view_yview+16+1, view_xview+343+400, view_yview+16+400-13,global.c_uiLineGrey,global.c_uiLineGrey,global.c_uiLineGrey,global.c_uiLineGrey,true)
    //draw shadow
    draw_rectangle_colour(startx+2, starty+2, startx+1+global.mapW*8, starty+1+global.mapH*8,c_black,c_black,c_black,c_black,false);
    //draw pos
    var xx = 0;
    var yy = 0;
    //loop vars
    var i = 0;
    var j = 0;
    //visibiilty colour mix
    var vis = c_gray;
    
    for( i=0 ; i&lt;global.mapW ; i++)
        { 
        for( j=0 ; j&lt;global.mapH ; j++ )
            {
            //set draw pos
            xx = startx+(i*8);
            yy = starty+(j*8);
            //check visibility
            if global.map.terrains[i,j].isVisible vis = c_white;
            else vis = c_gray;
            //draw terrain
            switch global.map.terrains[i,j].name
                {
                case "Sea" :
                    draw_sprite_ext(spr_minimap_sea,0,xx,yy,1,1,0,vis,1);
                    break; 
                case "Plains" :
                    draw_sprite_ext(spr_minimap_plains,0,xx,yy,1,1,0,vis,1);
                    break;
                case "Road" :
                    draw_sprite_ext(spr_minimap_road,global.map.terrains[i,j].image_index,xx,yy,1,1,0,vis,1);
                    break;
                case "Mountain" :
                    draw_sprite_ext(spr_minimap_mountain,0,xx,yy,1,1,0,vis,1);
                    break;
               case "Woods" :
                    draw_sprite_ext(spr_minimap_woods,0,xx,yy,1,1,0,vis,1);
                    break;
               case ("HQ") :
                    draw_sprite_ext(spr_minimap_HQ,global.map.terrains[i,j].image_index,xx,yy,1,1,0,vis,1);
                    draw_sprite(spr_minimap_property,5,xx,yy);
                    break;
               case ("City") :
                    draw_sprite_ext(spr_minimap_property,global.map.terrains[i,j].image_index,xx,yy,1,1,0,vis,1);
                    break;
               case ("Base") :
                    draw_sprite_ext(spr_minimap_property,global.map.terrains[i,j].image_index,xx,yy,1,1,0,vis,1);
                    break;
               case ("Radio Tower") :
                    draw_sprite_ext(spr_minimap_property,global.map.terrains[i,j].image_index,xx,yy,1,1,0,vis,1);
                    break;
               case ("Command Post") :
                    draw_sprite_ext(spr_minimap_property,global.map.terrains[i,j].image_index,xx,yy,1,1,0,vis,1);
                    draw_sprite(spr_minimap_property,5,xx,yy);
                    break;
               case ("River") :
                    draw_sprite_ext(spr_minimap_river,global.map.terrains[i,j].crossindex,xx,yy,1,1,0,vis,1);
                    break;
               case ("River Bridge") :
                    draw_sprite_ext(spr_minimap_river,global.map.terrains[i,j].crossindex,xx,yy,1,1,0,vis,1);
                    draw_sprite_ext(spr_minimap_bridge,global.map.terrains[i,j].crossing,xx,yy,1,1,0,vis,1);
                    break;
               case ("Sea Bridge") :
                    draw_sprite_ext(spr_minimap_sea,0,xx,yy,1,1,0,vis,1);
                    draw_sprite_ext(spr_minimap_bridge,global.map.terrains[i,j].crossing,xx,yy,1,1,0,vis,1);
                    break;
                      
                }
            ///draw unit on blink
            if(global.map.units[i,j] !=0 and global.blinking)
                {
                if(global.map.units[i,j].isVisible) 
                    {
                    draw_sprite(spr_minimap_unit,global.map.units[i,j].ownership,xx,yy);
                    if(global.map.units[i,j].isCommander) draw_sprite(spr_minimap_unit,0,xx,yy);
                    }
                }
            //draw radio boarder
            draw_sprite(spr_minimap_radioboarder,global.rangeCheck[i,j].rb_edge,xx,yy);
            }
        }

    }
    //return to UI white
    draw_set_colour(global.c_uiWhite );
    

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw Damage chart
if damage_chart_on {
    // draw base
    draw_sprite(spr_damageChartBase,0,view_xview[0],view_yview[0]);
    //scr_draw_num(spr_num_outlined,true,25,84,44,3);
    //scr_draw_num(spr_num_outlined,true,25,84,44+15,3);
    //scr_draw_num(spr_num_outlined,true,25,84,44+(15*2),3);
    
    //alingment
    start_x = 84 + 22 + view_xview[0];
    start_y = 44 + view_yview[0];
    
    row_height = 15;
    col_width  = 8*6;
    
    //loop start 
    
    ix = 1;
    iy = 1;
    
    for (ix = 1 ; ix &lt;=13 ; ix++){
        for (iy = 1 ; iy &lt;=13 ; iy++){
            //draw promary weapon damage
            scr_draw_num(spr_num_light , false, obj_MastertControls.DMG_P[ix,iy], start_x+((ix-1)*col_width), start_y+((iy-1)*row_height*2), 3); 
            //draw secondary weapon damage
            scr_draw_num(spr_num_inv , false, obj_MastertControls.DMG_S[ix,iy], start_x+((ix-1)*col_width), start_y+row_height+((iy-1)*row_height*2), 3); 
            
        } 
    }
    
    //draw guide lines
    if (mouse_x &gt; start_x-col_width and mouse_y &gt; start_y-row_height){
        var line_x = (((mouse_x - (start_x-col_width)) div col_width)) * col_width + start_x+3; 
        draw_line(line_x, view_yview[0]+36, line_x, view_yview[0]+view_hview[0]);
        
        var line_y = (((mouse_y - (start_y-row_height)) div row_height)) * row_height + start_y -3; 
        draw_line(view_xview[0]+60, line_y, view_xview[0]+view_wview[0], line_y);
        }
    //draw pointer
    //draw_sprite(spr_mousePointer, global.P_Turn.number-1,mouse_x, mouse_y);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
