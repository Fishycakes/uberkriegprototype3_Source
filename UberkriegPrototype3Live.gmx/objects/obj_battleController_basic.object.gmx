<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// OLD CODE
/*
//set cursor positions
global.posX = 0;
global.posY = 0;

//Create and Load Map
instance_create(0,0,obj_map);
scr_ubermap_load("protoland.ubm");

//create Cursor
instance_create(24,24,obj_battleCursor);
//deactivate, to reactivate when main phaze start
instance_deactivate_object(obj_battleCursor);

//create miniwin
instance_create(24,24,obj_miniwin);
instance_deactivate_object(obj_miniwin);

//player Queue
global.player_q = ds_queue_create();
//create priority q to organize player order 
global.temp_pq = ds_priority_create();
//debug variable, keeps track of number of HQs
global.HQnum = 0;


//creat player objects for each Exsisting HQ into a priority Q
with (obj_terrain_HQ){

    switch (ownership){
        case 0 :
        break;
        
        case 1: // create player 1
        global.HQnum +=1;
        global.P1 = instance_create(0,0,obj_player); 
        global.P1.number = 1;
        ds_priority_add(global.temp_pq, global.P1 ,1);
        break;
        
        case 2: // create player 2
        global.HQnum +=1;
        global.P2 = instance_create(0,0,obj_player);
        global.P2.number = 2;
        ds_priority_add(global.temp_pq, global.P2 ,2);
        break; 
        
        case 3: // create player 3
        global.HQnum +=1;
        global.P3 = instance_create(0,0,obj_player);
        global.P3.number = 3;
        ds_priority_add(global.temp_pq, global.P3 ,3);
        break;
        
        case 4: // create player 4
        global.HQnum +=1;
        global.P4 = instance_create(0,0,obj_player);
        global.P4.number = 4;  
        ds_priority_add(global.temp_pq, global.P4 ,4);
        break;
    
        }
    }
    
//find last player: used to detect day change
global.last_player = ds_priority_find_max(global.temp_pq).number;

    
//convert priority Q to regular Q
i = 0;
for( i=0 ; i&lt;ds_priority_size(global.temp_pq)+1 ; i+=1){
    p_priority = ds_priority_delete_min(global.temp_pq);
    ds_queue_enqueue(global.player_q,p_priority);
    }
//delete temp priority Q
ds_priority_destroy(global.temp_pq);    


//turn phaze
global.Phaze = "starting" //  starting -&gt; upkeep -&gt; main -&gt; end
//player turn
global.P_Turn = ds_queue_head(global.player_q);
//global Day
global.Day = 1;

//create fadein
 instance_create(0,0,obj_starting);
 obj_starting.state = "waiting"; 
 
//vision reset and update for first player
scr_globalVisionReset();
scr_updateGlobalVision();
 

 



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initiate cursor traking global variable
global.posX = 0;
global.posY = 0; 
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///creat &amp; load map
instance_create(0,0,obj_map);
scr_ubermap_load("protoland.ubm");
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create HUD objects: Cursor,miniwin

//create &amp; deactivate Cursor
instance_create(24,24,obj_battleCursor);
instance_deactivate_object(obj_battleCursor);

//create &amp; deactivate miniwin
instance_create(24,24,obj_miniwin);
instance_deactivate_object(obj_miniwin);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create player Q &amp; turning : set P1-Day1 VARs

//player Queue
global.player_q = ds_queue_create();
//create priority q to organize player order 
//to be destroyed once players are ordered 
global.temp_pq = ds_priority_create();
//debug variable, keeps track of number of HQs
global.HQnum = 0;

//creat player objects for each Exsisting HQ into a priority Q
with (obj_terrain_HQ){

    switch (ownership){
        case 0 :
        break;
        
        case 1: // create player 1
        global.HQnum +=1;
        global.P1 = instance_create(0,0,obj_player); 
        global.P1.number = 1;
        ds_priority_add(global.temp_pq, global.P1 ,1);
        break;
        
        case 2: // create player 2
        global.HQnum +=1;
        global.P2 = instance_create(0,0,obj_player);
        global.P2.number = 2;
        ds_priority_add(global.temp_pq, global.P2 ,2);
        break; 
        
        case 3: // create player 3
        global.HQnum +=1;
        global.P3 = instance_create(0,0,obj_player);
        global.P3.number = 3;
        ds_priority_add(global.temp_pq, global.P3 ,3);
        break;
        
        case 4: // create player 4
        global.HQnum +=1;
        global.P4 = instance_create(0,0,obj_player);
        global.P4.number = 4;  
        ds_priority_add(global.temp_pq, global.P4 ,4);
        break;
    
        }
    }
    
//find last player: used to detect day change
global.last_player = ds_priority_find_max(global.temp_pq).number;

    
//convert priority Q to regular Q
i = 0;
for( i=0 ; i&lt;ds_priority_size(global.temp_pq)+1 ; i+=1){
    p_priority = ds_priority_delete_min(global.temp_pq);
    ds_queue_enqueue(global.player_q,p_priority);
    }
//delete temp priority Q
ds_priority_destroy(global.temp_pq);    

///CRITICAL TURNING VARIABLS !!!
 
//turn phaze
global.Phaze = "starting" //  starting -&gt; upkeep -&gt; main -&gt; end
//player turn, returns player object
global.P_Turn = ds_queue_head(global.player_q);
//global Day
global.Day = 1;

//create turn change object set to start in waiting state
 instance_create(0,0,obj_starting);
 obj_starting.state = "waiting"; 
 
//vision reset and update for first player
scr_globalVisionReset();
scr_updateGlobalVision();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
// DAY
draw_text(0,0, "DAY: " + string(global.Day));
//player and phaze
draw_text(0,12, global.Phaze + "P" + string(global.P_Turn.number));
//funds
current_player = ds_queue_head(global.player_q);
draw_text(0,24, "Funds: " + string(current_player.funds ));
//depth
draw_text(0,36,"DEPTH: " + string( obj_map.units[global.posX,global.posY].depth));






/*
draw_text(0,24, global.Phaze + string(global.P_Turn.number));
draw_text(0,36, "playernum:"+string(ds_queue_size(global.player_q)));
draw_text(0,48, "HQ count: " + string(global.HQnum));
draw_text(0,72, "Last Player: : " + string(global.last_player));
draw_text(0,12, string_letters(obj_map.terrains[global.posX,global.posY].name));
8?




</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
